
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003e18  08003e18  00004e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f68  08003f68  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f68  08003f68  00004f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b1c  20000068  08003fd8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  20000b84  08003fd8  00005b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4e  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db3  00000000  00000000  0000dee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0000fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fc  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016adf  00000000  00000000  00010a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afc4  00000000  00000000  00027573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b4a  00000000  00000000  00032537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  000b90c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000bb69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e00 	.word	0x08003e00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e00 	.word	0x08003e00

080001e0 <PendSV_Handler>:
 80001e0:	f01e 0f04 	tst.w	lr, #4
 80001e4:	bf0c      	ite	eq
 80001e6:	f3ef 8008 	mrseq	r0, MSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
 80001ee:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80001f2:	f380 8809 	msr	PSP, r0
 80001f6:	f000 fe55 	bl	8000ea4 <SVC_Handler_Main>
 80001fa:	f3ef 8009 	mrs	r0, PSP
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000202:	f380 8809 	msr	PSP, r0
 8000206:	f06f 0e02 	mvn.w	lr, #2
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <order_finder>:
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	2320      	movs	r3, #32
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <order_finder+0x1e>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d8f5      	bhi.n	80005b2 <order_finder+0x12>
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <free_add>:
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffdd 	bl	80005a0 <order_finder>
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <free_add+0x50>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <free_add+0x50>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d005      	beq.n	800060c <free_add+0x38>
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <free_add+0x50>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	4904      	ldr	r1, [pc, #16]	@ (8000624 <free_add+0x50>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000088 	.word	0x20000088

08000628 <free_remove>:
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffb3 	bl	80005a0 <order_finder>
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <free_remove+0x6c>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	d10e      	bne.n	8000668 <free_remove+0x40>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	4911      	ldr	r1, [pc, #68]	@ (8000694 <free_remove+0x6c>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d016      	beq.n	800068c <free_remove+0x64>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	e011      	b.n	800068c <free_remove+0x64>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <free_remove+0x52>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	6892      	ldr	r2, [r2, #8]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <free_remove+0x64>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	68d2      	ldr	r2, [r2, #12]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000088 	.word	0x20000088

08000698 <k_mem_alloc>:
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	4b31      	ldr	r3, [pc, #196]	@ (8000768 <k_mem_alloc+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d102      	bne.n	80006ae <k_mem_alloc+0x16>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d101      	bne.n	80006b2 <k_mem_alloc+0x1a>
 80006ae:	2300      	movs	r3, #0
 80006b0:	e056      	b.n	8000760 <k_mem_alloc+0xc8>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3310      	adds	r3, #16
 80006b6:	623b      	str	r3, [r7, #32]
 80006b8:	6a38      	ldr	r0, [r7, #32]
 80006ba:	f7ff ff71 	bl	80005a0 <order_finder>
 80006be:	61f8      	str	r0, [r7, #28]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006c4:	e048      	b.n	8000758 <k_mem_alloc+0xc0>
 80006c6:	4a29      	ldr	r2, [pc, #164]	@ (800076c <k_mem_alloc+0xd4>)
 80006c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d03f      	beq.n	8000752 <k_mem_alloc+0xba>
 80006d2:	4a26      	ldr	r2, [pc, #152]	@ (800076c <k_mem_alloc+0xd4>)
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69b8      	ldr	r0, [r7, #24]
 80006de:	f7ff ffa3 	bl	8000628 <free_remove>
 80006e2:	e01b      	b.n	800071c <k_mem_alloc+0x84>
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	3b01      	subs	r3, #1
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ea:	2220      	movs	r2, #32
 80006ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	4413      	add	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff5c 	bl	80005d4 <free_add>
 800071c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	429a      	cmp	r2, r3
 8000722:	dcdf      	bgt.n	80006e4 <k_mem_alloc+0x4c>
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <k_mem_alloc+0xd8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	095b      	lsrs	r3, r3, #5
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <k_mem_alloc+0xdc>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4413      	add	r3, r2
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	f000 fb40 	bl	8000dc4 <osGetTID>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3310      	adds	r3, #16
 8000750:	e006      	b.n	8000760 <k_mem_alloc+0xc8>
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	3301      	adds	r3, #1
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	2b0a      	cmp	r3, #10
 800075c:	ddb3      	ble.n	80006c6 <k_mem_alloc+0x2e>
 800075e:	2300      	movs	r3, #0
 8000760:	4618      	mov	r0, r3
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000084 	.word	0x20000084
 800076c:	20000088 	.word	0x20000088
 8000770:	200000b4 	.word	0x200000b4
 8000774:	200000b8 	.word	0x200000b8

08000778 <nullTask>:
U32 isRunning = 0;

static task_t nextTask = 0; 

void nullTask(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	while(1){
		printf("NT\r\n");
 800077c:	4801      	ldr	r0, [pc, #4]	@ (8000784 <nullTask+0xc>)
 800077e:	f002 fcdb 	bl	8003138 <puts>
 8000782:	e7fb      	b.n	800077c <nullTask+0x4>
 8000784:	08003e18 	.word	0x08003e18

08000788 <osKernelInit>:
    return isInitialized;
}

// Initialize Kernel with global-level data structures
void osKernelInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

	SHPR3 |= 0xFFU << 24; // Set the priority of SysTick to be the weakest
 800078e:	4b64      	ldr	r3, [pc, #400]	@ (8000920 <osKernelInit+0x198>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a63      	ldr	r2, [pc, #396]	@ (8000920 <osKernelInit+0x198>)
 8000794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000798:	6013      	str	r3, [r2, #0]
	SHPR3 |= 0xFEU << 16; // shift the constant 0xFE 16 bits to set PendSV priority
 800079a:	4b61      	ldr	r3, [pc, #388]	@ (8000920 <osKernelInit+0x198>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a60      	ldr	r2, [pc, #384]	@ (8000920 <osKernelInit+0x198>)
 80007a0:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 80007a4:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; // set the priority of SVC higher than PendSV
 80007a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000924 <osKernelInit+0x19c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a5e      	ldr	r2, [pc, #376]	@ (8000924 <osKernelInit+0x19c>)
 80007ac:	f043 437d 	orr.w	r3, r3, #4244635648	@ 0xfd000000
 80007b0:	6013      	str	r3, [r2, #0]

	// If Kernel is already initialized, don't initialize again!!
	if (isInitialized)
 80007b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000928 <osKernelInit+0x1a0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f040 80ab 	bne.w	8000912 <osKernelInit+0x18a>
		//printf("Already initialized\r\n");
		return;
	}

	// Initialize TCB arr with initial values
	for (int i = 0; i < MAX_TASKS; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	e096      	b.n	80008f0 <osKernelInit+0x168>
	{
		// Initializing Null Task
		if (i == 0)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d152      	bne.n	800086e <osKernelInit+0xe6>
		{
			kernel.tcbArray[i].tid = TID_NULL;
 80007c8:	4958      	ldr	r1, [pc, #352]	@ (800092c <osKernelInit+0x1a4>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	3354      	adds	r3, #84	@ 0x54
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].state = READY; // Set initial state
 80007dc:	4953      	ldr	r1, [pc, #332]	@ (800092c <osKernelInit+0x1a4>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	3358      	adds	r3, #88	@ 0x58
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
			kernel.tcbArray[i].stack_size = 0;
 80007f0:	494e      	ldr	r1, [pc, #312]	@ (800092c <osKernelInit+0x1a4>)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	335a      	adds	r3, #90	@ 0x5a
 8000800:	2200      	movs	r2, #0
 8000802:	801a      	strh	r2, [r3, #0]
			kernel.tcbArray[i].stack_high = 0;
 8000804:	4949      	ldr	r1, [pc, #292]	@ (800092c <osKernelInit+0x1a4>)
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	3350      	adds	r3, #80	@ 0x50
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].ptask = nullTask;
 8000818:	4944      	ldr	r1, [pc, #272]	@ (800092c <osKernelInit+0x1a4>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	334c      	adds	r3, #76	@ 0x4c
 8000828:	4a41      	ldr	r2, [pc, #260]	@ (8000930 <osKernelInit+0x1a8>)
 800082a:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].pc = nullTask;
 800082c:	4940      	ldr	r1, [pc, #256]	@ (8000930 <osKernelInit+0x1a8>)
 800082e:	483f      	ldr	r0, [pc, #252]	@ (800092c <osKernelInit+0x1a4>)
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4403      	add	r3, r0
 800083c:	3360      	adds	r3, #96	@ 0x60
 800083e:	6019      	str	r1, [r3, #0]
			kernel.tcbArray[i].deadline = 500; 	// 5ms
 8000840:	493a      	ldr	r1, [pc, #232]	@ (800092c <osKernelInit+0x1a4>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3364      	adds	r3, #100	@ 0x64
 8000850:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000854:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].originalDeadline = 500;
 8000856:	4935      	ldr	r1, [pc, #212]	@ (800092c <osKernelInit+0x1a4>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	4413      	add	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	336c      	adds	r3, #108	@ 0x6c
 8000866:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e03d      	b.n	80008ea <osKernelInit+0x162>
		}
		else
		{
			kernel.tcbArray[i].tid = i;
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	482e      	ldr	r0, [pc, #184]	@ (800092c <osKernelInit+0x1a4>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4613      	mov	r3, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	4413      	add	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4403      	add	r3, r0
 800087e:	3354      	adds	r3, #84	@ 0x54
 8000880:	6019      	str	r1, [r3, #0]
			kernel.tcbArray[i].state = DORMANT; // Set initial state
 8000882:	492a      	ldr	r1, [pc, #168]	@ (800092c <osKernelInit+0x1a4>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4613      	mov	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4413      	add	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	3358      	adds	r3, #88	@ 0x58
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
			kernel.tcbArray[i].stack_size = 0;
 8000896:	4925      	ldr	r1, [pc, #148]	@ (800092c <osKernelInit+0x1a4>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	4413      	add	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	335a      	adds	r3, #90	@ 0x5a
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
			kernel.tcbArray[i].stack_high = 0;
 80008aa:	4920      	ldr	r1, [pc, #128]	@ (800092c <osKernelInit+0x1a4>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	3350      	adds	r3, #80	@ 0x50
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].deadline = 500; 	// 5ms
 80008be:	491b      	ldr	r1, [pc, #108]	@ (800092c <osKernelInit+0x1a4>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	3364      	adds	r3, #100	@ 0x64
 80008ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008d2:	601a      	str	r2, [r3, #0]
			kernel.tcbArray[i].originalDeadline = 500;
 80008d4:	4915      	ldr	r1, [pc, #84]	@ (800092c <osKernelInit+0x1a4>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	336c      	adds	r3, #108	@ 0x6c
 80008e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	f77f af65 	ble.w	80007c2 <osKernelInit+0x3a>

		}
	}

	kernel.currTaskId = -1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <osKernelInit+0x1a4>)
 80008fa:	f04f 32ff 	mov.w	r2, #4294967295
 80008fe:	649a      	str	r2, [r3, #72]	@ 0x48
	// Potentially also subtract the null tasks size
	kernel.availMemory = MAX_STACK_SIZE - MAIN_STACK_SIZE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <osKernelInit+0x1a4>)
 8000902:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 8000906:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	isInitialized = 1;
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <osKernelInit+0x1a0>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e000      	b.n	8000914 <osKernelInit+0x18c>
		return;
 8000912:	bf00      	nop
}
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed20 	.word	0xe000ed20
 8000924:	e000ed1c 	.word	0xe000ed1c
 8000928:	20000748 	.word	0x20000748
 800092c:	200004b8 	.word	0x200004b8
 8000930:	08000779 	.word	0x08000779

08000934 <osKernelStart>:

// Run first task, initialize scheduling algorithm
int osKernelStart()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	printf("IN KERNELSTART\r\n");
 800093a:	481f      	ldr	r0, [pc, #124]	@ (80009b8 <osKernelStart+0x84>)
 800093c:	f002 fbfc 	bl	8003138 <puts>
	if (!isInitialized || isRunning)
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <osKernelStart+0x88>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <osKernelStart+0x1c>
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <osKernelStart+0x8c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <osKernelStart+0x20>
	{
		//printf("Is not initialized or is running.\r\n");
		return RTX_ERR;
 8000950:	2300      	movs	r3, #0
 8000952:	e02c      	b.n	80009ae <osKernelStart+0x7a>
	}


	printf("T1\r\n");
 8000954:	481b      	ldr	r0, [pc, #108]	@ (80009c4 <osKernelStart+0x90>)
 8000956:	f002 fbef 	bl	8003138 <puts>
	// Initiating a system call
	// __asm("SVC #17");



	SCB->ICSR |= 1<<28; //control register bit for a PendSV interrupt
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <osKernelStart+0x94>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a1a      	ldr	r2, [pc, #104]	@ (80009c8 <osKernelStart+0x94>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	6053      	str	r3, [r2, #4]
	__asm("isb");
 8000966:	f3bf 8f6f 	isb	sy


	printf("T3\r\n");
 800096a:	4818      	ldr	r0, [pc, #96]	@ (80009cc <osKernelStart+0x98>)
 800096c:	f002 fbe4 	bl	8003138 <puts>
//
// 	__disable_irq();

	//NOT SURE IF WE NEED THIS OR NOT IT SAID IN THE MANUAL THAT WE SHOULD RESET THE TIMERS
	//we want to reset all the timers so loop through all the tasks and reset their deadlines
	for(int i = 0; i < MAX_TASKS; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	e014      	b.n	80009a0 <osKernelStart+0x6c>
		kernel.tcbArray[i].deadline = kernel.tcbArray[i].originalDeadline;
 8000976:	4916      	ldr	r1, [pc, #88]	@ (80009d0 <osKernelStart+0x9c>)
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	336c      	adds	r3, #108	@ 0x6c
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <osKernelStart+0x9c>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	4413      	add	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4403      	add	r3, r0
 8000996:	3364      	adds	r3, #100	@ 0x64
 8000998:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b0f      	cmp	r3, #15
 80009a4:	dde7      	ble.n	8000976 <osKernelStart+0x42>
	}

	//enable interrupts just in case they were disabled before starting the Kernel
//	__enable_irq();
	isRunning = 1;
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <osKernelStart+0x8c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]


	return RTX_OK;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08003e1c 	.word	0x08003e1c
 80009bc:	20000748 	.word	0x20000748
 80009c0:	20000754 	.word	0x20000754
 80009c4:	08003e2c 	.word	0x08003e2c
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	08003e30 	.word	0x08003e30
 80009d0:	200004b8 	.word	0x200004b8

080009d4 <osCreateTask>:

int osCreateTask(TCB *task)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08d      	sub	sp, #52	@ 0x34
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	// Return error if task stack size less than min stack size
	if (task == NULL || task->stack_size < STACK_SIZE || task->ptask == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <osCreateTask+0x20>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	89db      	ldrh	r3, [r3, #14]
 80009e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009ea:	d303      	bcc.n	80009f4 <osCreateTask+0x20>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <osCreateTask+0x24>
	{
		//printf("Not enough stack size \r\n");
		return RTX_ERR;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e1d9      	b.n	8000dac <osCreateTask+0x3d8>
	}

	// Main stack pointer initial value
	U32 *MSP_INIT_VAL = *(U32 **)0x0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	617b      	str	r3, [r7, #20]

	// Check if memory is available, if not return error
	if (task->stack_size > kernel.availMemory)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	89db      	ldrh	r3, [r3, #14]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b3a      	ldr	r3, [pc, #232]	@ (8000af0 <osCreateTask+0x11c>)
 8000a06:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d901      	bls.n	8000a12 <osCreateTask+0x3e>
	{
		//printf("Not enough memory \r\n");
		return RTX_ERR;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e1cc      	b.n	8000dac <osCreateTask+0x3d8>
	}

	// Finding a dormant task in the tcbArray
	int taskIndex = -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// printf("TEST 3\r\n");

	// Max U16 value, we want to find the minimum stack size that accomodates our task
	U16 stack_size = 65535;
 8000a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1e:	b672      	cpsid	i
}
 8000a20:	bf00      	nop

	//disable interrupts so that the task creation process doesn't get preempted in the middle and causes data corruption
	__disable_irq();

	for (int i = 1; i < MAX_TASKS; i++)
 8000a22:	2301      	movs	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a26:	e04c      	b.n	8000ac2 <osCreateTask+0xee>
	{
		if (kernel.tcbArray[i].state == DORMANT && kernel.tcbArray[i].stack_size == 0)
 8000a28:	4931      	ldr	r1, [pc, #196]	@ (8000af0 <osCreateTask+0x11c>)
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3358      	adds	r3, #88	@ 0x58
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10d      	bne.n	8000a5a <osCreateTask+0x86>
 8000a3e:	492c      	ldr	r1, [pc, #176]	@ (8000af0 <osCreateTask+0x11c>)
 8000a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	335a      	adds	r3, #90	@ 0x5a
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <osCreateTask+0x86>
		{
			taskIndex = i;
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 8000a58:	e036      	b.n	8000ac8 <osCreateTask+0xf4>
		}

		// Finding a dormant stack with a higher or equal stack_size value, that is the minimum
		// This is to prevent tasks from not being able to run
		// i.e. one task is on a stack that has 5000 bytes, but only requires 512. Another task requires 4000 bytes but can't find a suitable stack
		else if (kernel.tcbArray[i].state == DORMANT && kernel.tcbArray[i].stack_size >= task->stack_size && kernel.tcbArray[i].stack_size <= stack_size)
 8000a5a:	4925      	ldr	r1, [pc, #148]	@ (8000af0 <osCreateTask+0x11c>)
 8000a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3358      	adds	r3, #88	@ 0x58
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d125      	bne.n	8000abc <osCreateTask+0xe8>
 8000a70:	491f      	ldr	r1, [pc, #124]	@ (8000af0 <osCreateTask+0x11c>)
 8000a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a74:	4613      	mov	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	335a      	adds	r3, #90	@ 0x5a
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	89db      	ldrh	r3, [r3, #14]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d318      	bcc.n	8000abc <osCreateTask+0xe8>
 8000a8a:	4919      	ldr	r1, [pc, #100]	@ (8000af0 <osCreateTask+0x11c>)
 8000a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	335a      	adds	r3, #90	@ 0x5a
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d30c      	bcc.n	8000abc <osCreateTask+0xe8>
		{
			taskIndex = i;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			stack_size = kernel.tcbArray[i].stack_size;
 8000aa6:	4912      	ldr	r1, [pc, #72]	@ (8000af0 <osCreateTask+0x11c>)
 8000aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	335a      	adds	r3, #90	@ 0x5a
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	857b      	strh	r3, [r7, #42]	@ 0x2a
			break;
 8000aba:	e005      	b.n	8000ac8 <osCreateTask+0xf4>
	for (int i = 1; i < MAX_TASKS; i++)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abe:	3301      	adds	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	ddaf      	ble.n	8000a28 <osCreateTask+0x54>
		}
	}

	// Max amount of tasks scheduled
	if (taskIndex == -1)
 8000ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ace:	d101      	bne.n	8000ad4 <osCreateTask+0x100>
	{
		//printf("Maximum amount of tasks scheduled \r\n");
		return RTX_ERR;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e16b      	b.n	8000dac <osCreateTask+0x3d8>
	}

	// printf("TEST 4\r\n");

	// Assigning tid to task (REQUIRED)
	task->tid = taskIndex;
 8000ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	609a      	str	r2, [r3, #8]

	// Creating a task in a never before allocated stack
	// These values stay the same otherwise, as we don't do any memory management apart from the first task created per stack
	if (stack_size == 65535)
 8000ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000adc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d142      	bne.n	8000b6a <osCreateTask+0x196>
	{
		// Calculate total stack size taken by other tasks
		U32 total_stack_size_taken = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < taskIndex; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	e01d      	b.n	8000b2a <osCreateTask+0x156>
 8000aee:	bf00      	nop
 8000af0:	200004b8 	.word	0x200004b8
		{
			if (kernel.tcbArray[i].state != DORMANT)
 8000af4:	49af      	ldr	r1, [pc, #700]	@ (8000db4 <osCreateTask+0x3e0>)
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	3358      	adds	r3, #88	@ 0x58
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00c      	beq.n	8000b24 <osCreateTask+0x150>
			{
				total_stack_size_taken += kernel.tcbArray[i].stack_size;
 8000b0a:	49aa      	ldr	r1, [pc, #680]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	440b      	add	r3, r1
 8000b18:	335a      	adds	r3, #90	@ 0x5a
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	4413      	add	r3, r2
 8000b22:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < taskIndex; i++)
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbe0      	blt.n	8000af4 <osCreateTask+0x120>
			}
		}

		kernel.tcbArray[taskIndex].stack_high = MSP_INIT_VAL - MAIN_STACK_SIZE - total_stack_size_taken;
 8000b32:	6a3a      	ldr	r2, [r7, #32]
 8000b34:	4ba0      	ldr	r3, [pc, #640]	@ (8000db8 <osCreateTask+0x3e4>)
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	499c      	ldr	r1, [pc, #624]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b44:	4613      	mov	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3350      	adds	r3, #80	@ 0x50
 8000b50:	6018      	str	r0, [r3, #0]
		kernel.tcbArray[taskIndex].stack_size = task->stack_size;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	89d8      	ldrh	r0, [r3, #14]
 8000b56:	4997      	ldr	r1, [pc, #604]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	335a      	adds	r3, #90	@ 0x5a
 8000b66:	4602      	mov	r2, r0
 8000b68:	801a      	strh	r2, [r3, #0]
	}

	// printf("TEST 5\r\n");
	// Setting task values to tcb array
	kernel.tcbArray[taskIndex].ptask = task->ptask;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	4891      	ldr	r0, [pc, #580]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4403      	add	r3, r0
 8000b7c:	334c      	adds	r3, #76	@ 0x4c
 8000b7e:	6019      	str	r1, [r3, #0]
	kernel.tcbArray[taskIndex].pc = task->ptask; // Set the program counter to the task entry point
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	498b      	ldr	r1, [pc, #556]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	3360      	adds	r3, #96	@ 0x60
 8000b96:	6018      	str	r0, [r3, #0]
	kernel.tcbArray[taskIndex].state = READY;
 8000b98:	4986      	ldr	r1, [pc, #536]	@ (8000db4 <osCreateTask+0x3e0>)
 8000b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3358      	adds	r3, #88	@ 0x58
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
	kernel.tcbArray[taskIndex].tid = taskIndex;
 8000bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000bae:	4881      	ldr	r0, [pc, #516]	@ (8000db4 <osCreateTask+0x3e0>)
 8000bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4403      	add	r3, r0
 8000bbc:	3354      	adds	r3, #84	@ 0x54
 8000bbe:	6019      	str	r1, [r3, #0]
	kernel.tcbArray[taskIndex].deadline = 500; // 5ms default
 8000bc0:	497c      	ldr	r1, [pc, #496]	@ (8000db4 <osCreateTask+0x3e0>)
 8000bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	3364      	adds	r3, #100	@ 0x64
 8000bd0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bd4:	601a      	str	r2, [r3, #0]
	kernel.tcbArray[taskIndex].originalDeadline = 500;
 8000bd6:	4977      	ldr	r1, [pc, #476]	@ (8000db4 <osCreateTask+0x3e0>)
 8000bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	336c      	adds	r3, #108	@ 0x6c
 8000be6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bea:	601a      	str	r2, [r3, #0]
	// printf("TEST 6\r\n");

	// TODO : Need to properly assign and alloc data. Involved modifying metadata of memory to change ownership to the new task

	// get pointer from alloc so we can access the data block struct to modify the owner tid
	void* newTaskPointer = k_mem_alloc(kernel.tcbArray[taskIndex].stack_size);
 8000bec:	4971      	ldr	r1, [pc, #452]	@ (8000db4 <osCreateTask+0x3e0>)
 8000bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	335a      	adds	r3, #90	@ 0x5a
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd4a 	bl	8000698 <k_mem_alloc>
 8000c04:	6138      	str	r0, [r7, #16]
	// printf("TEST 7\r\n");
	uintptr_t dum_adress = (uintptr_t)newTaskPointer - sizeof(data_Block);
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3b10      	subs	r3, #16
 8000c0a:	60fb      	str	r3, [r7, #12]
	// printf("TEST 8\r\n");
	data_Block* buddy_block = (data_Block*)dum_adress;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	60bb      	str	r3, [r7, #8]
	

	// kernel.tcbArray[taskIndex].stack_high = newTaskPointer;

	// Calculating stack pointer
	kernel.tcbArray[taskIndex].stack_ptr = kernel.tcbArray[taskIndex].stack_high - task->stack_size;
 8000c10:	4968      	ldr	r1, [pc, #416]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c14:	4613      	mov	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3350      	adds	r3, #80	@ 0x50
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	89d2      	ldrh	r2, [r2, #14]
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4962      	ldr	r1, [pc, #392]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	335c      	adds	r3, #92	@ 0x5c
 8000c3a:	6018      	str	r0, [r3, #0]

	// Update available memory
	kernel.availMemory -= kernel.tcbArray[taskIndex].stack_size;
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c3e:	f8d3 128c 	ldr.w	r1, [r3, #652]	@ 0x28c
 8000c42:	485c      	ldr	r0, [pc, #368]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4403      	add	r3, r0
 8000c50:	335a      	adds	r3, #90	@ 0x5a
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	1acb      	subs	r3, r1, r3
 8000c56:	4a57      	ldr	r2, [pc, #348]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c58:	f8c2 328c 	str.w	r3, [r2, #652]	@ 0x28c

	// enqueue(&(kernel.queue), kernel.tcbArray[taskIndex].tid); Queue not needed

	*(--kernel.tcbArray[taskIndex].stack_ptr) = 1 << 24;							   // xPSR, setting chip to thumb mode
 8000c5c:	4955      	ldr	r1, [pc, #340]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c60:	4613      	mov	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	335c      	adds	r3, #92	@ 0x5c
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1f19      	subs	r1, r3, #4
 8000c70:	4850      	ldr	r0, [pc, #320]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4403      	add	r3, r0
 8000c7e:	335c      	adds	r3, #92	@ 0x5c
 8000c80:	6019      	str	r1, [r3, #0]
 8000c82:	494c      	ldr	r1, [pc, #304]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c86:	4613      	mov	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	335c      	adds	r3, #92	@ 0x5c
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c98:	601a      	str	r2, [r3, #0]
	*(--kernel.tcbArray[taskIndex].stack_ptr) = (U32)kernel.tcbArray[taskIndex].ptask;
 8000c9a:	4946      	ldr	r1, [pc, #280]	@ (8000db4 <osCreateTask+0x3e0>)
 8000c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	334c      	adds	r3, #76	@ 0x4c
 8000caa:	681c      	ldr	r4, [r3, #0]
 8000cac:	4941      	ldr	r1, [pc, #260]	@ (8000db4 <osCreateTask+0x3e0>)
 8000cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	335c      	adds	r3, #92	@ 0x5c
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1f19      	subs	r1, r3, #4
 8000cc0:	483c      	ldr	r0, [pc, #240]	@ (8000db4 <osCreateTask+0x3e0>)
 8000cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4403      	add	r3, r0
 8000cce:	335c      	adds	r3, #92	@ 0x5c
 8000cd0:	6019      	str	r1, [r3, #0]
 8000cd2:	4938      	ldr	r1, [pc, #224]	@ (8000db4 <osCreateTask+0x3e0>)
 8000cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	335c      	adds	r3, #92	@ 0x5c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 14; i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	e020      	b.n	8000d30 <osCreateTask+0x35c>
	{
		*(--kernel.tcbArray[taskIndex].stack_ptr) = 0xA; // An arbitrary number
 8000cee:	4931      	ldr	r1, [pc, #196]	@ (8000db4 <osCreateTask+0x3e0>)
 8000cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	335c      	adds	r3, #92	@ 0x5c
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1f19      	subs	r1, r3, #4
 8000d02:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d06:	4613      	mov	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4403      	add	r3, r0
 8000d10:	335c      	adds	r3, #92	@ 0x5c
 8000d12:	6019      	str	r1, [r3, #0]
 8000d14:	4927      	ldr	r1, [pc, #156]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d18:	4613      	mov	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	335c      	adds	r3, #92	@ 0x5c
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	220a      	movs	r2, #10
 8000d28:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 14; i++)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b0d      	cmp	r3, #13
 8000d34:	dddb      	ble.n	8000cee <osCreateTask+0x31a>
	}

	// Special case when the created task pre-empts the task that created it
	if(kernel.tcbArray[taskIndex].deadline < kernel.tcbArray[kernel.currTaskId].deadline 
 8000d36:	491f      	ldr	r1, [pc, #124]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	3364      	adds	r3, #100	@ 0x64
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d4c:	4819      	ldr	r0, [pc, #100]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4403      	add	r3, r0
 8000d58:	3364      	adds	r3, #100	@ 0x64
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d319      	bcc.n	8000d94 <osCreateTask+0x3c0>
		|| ((kernel.tcbArray[taskIndex].deadline == kernel.tcbArray[kernel.currTaskId].deadline) && (taskIndex < kernel.currTaskId))) {
 8000d60:	4914      	ldr	r1, [pc, #80]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3364      	adds	r3, #100	@ 0x64
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d76:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4403      	add	r3, r0
 8000d82:	3364      	adds	r3, #100	@ 0x64
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4299      	cmp	r1, r3
 8000d88:	d10d      	bne.n	8000da6 <osCreateTask+0x3d2>
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <osCreateTask+0x3e0>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d90:	429a      	cmp	r2, r3
 8000d92:	da08      	bge.n	8000da6 <osCreateTask+0x3d2>
		nextTask = taskIndex;
 8000d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <osCreateTask+0x3e8>)
 8000d98:	6013      	str	r3, [r2, #0]
		if(isRunning) {
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <osCreateTask+0x3ec>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <osCreateTask+0x3d2>
			osYield();
 8000da2:	f000 f823 	bl	8000dec <osYield>
  __ASM volatile ("cpsie i" : : : "memory");
 8000da6:	b662      	cpsie	i
}
 8000da8:	bf00      	nop
	}
	
	//enable interrupts after creating the task so that there is no data corruption or preemption happening during the process of creating a task
	__enable_irq();

	return RTX_OK;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3734      	adds	r7, #52	@ 0x34
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	200004b8 	.word	0x200004b8
 8000db8:	3ffffc00 	.word	0x3ffffc00
 8000dbc:	20000758 	.word	0x20000758
 8000dc0:	20000754 	.word	0x20000754

08000dc4 <osGetTID>:
	return RTX_OK;
}

// Retrieve TID from stack?
task_t osGetTID()
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	if (nextTask == 0) { return 0; }
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <osGetTID+0x20>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <osGetTID+0x10>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e001      	b.n	8000dd8 <osGetTID+0x14>
	return kernel.currTaskId;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <osGetTID+0x24>)
 8000dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000758 	.word	0x20000758
 8000de8:	200004b8 	.word	0x200004b8

08000dec <osYield>:
	__enable_irq(); 

	return RTX_OK;
}

void osYield(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	// also not sure if we need this michael double check 
	// if any tasks are sleeping and earliest is still 0 (nullTask) then call nullTask
	if (sleepingTasks > 0 && nextTask == 0){ 			// This case probably can just be if theres at least 1 sleeping task since we just need to make sure eventually the nulltask will be switched off of
 8000df2:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <osYield+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <osYield+0x1a>
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <osYield+0xa8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <osYield+0x1a>
		nullTask();										// this makes sense but I don't know for sure if we need to set it back to zero
 8000e02:	f7ff fcb9 	bl	8000778 <nullTask>
	}


	printf("TASK %d YIELDING\r\n", kernel.currTaskId);
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <osYield+0xac>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <osYield+0xb0>)
 8000e0e:	f002 f92b 	bl	8003068 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e12:	b672      	cpsid	i
}
 8000e14:	bf00      	nop

	__disable_irq();

	// reset the task's remaining time back to the deadline 
	kernel.tcbArray[kernel.currTaskId].deadline = kernel.tcbArray[kernel.currTaskId].originalDeadline;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <osYield+0xac>)
 8000e18:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <osYield+0xac>)
 8000e1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e1e:	481e      	ldr	r0, [pc, #120]	@ (8000e98 <osYield+0xac>)
 8000e20:	460b      	mov	r3, r1
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	440b      	add	r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4403      	add	r3, r0
 8000e2a:	336c      	adds	r3, #108	@ 0x6c
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	481a      	ldr	r0, [pc, #104]	@ (8000e98 <osYield+0xac>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4413      	add	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4403      	add	r3, r0
 8000e3a:	3364      	adds	r3, #100	@ 0x64
 8000e3c:	6019      	str	r1, [r3, #0]

	// save current running task's context set task status back to ready from running
	kernel.tcbArray[kernel.currTaskId].state = READY;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <osYield+0xac>)
 8000e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e42:	4915      	ldr	r1, [pc, #84]	@ (8000e98 <osYield+0xac>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3358      	adds	r3, #88	@ 0x58
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000e54:	f3ef 8309 	mrs	r3, PSP
 8000e58:	607b      	str	r3, [r7, #4]
  return(result);
 8000e5a:	6879      	ldr	r1, [r7, #4]
	kernel.tcbArray[kernel.currTaskId].stack_ptr = __get_PSP();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <osYield+0xac>)
 8000e5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e60:	4608      	mov	r0, r1
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <osYield+0xac>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	335c      	adds	r3, #92	@ 0x5c
 8000e70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e72:	b662      	cpsie	i
}
 8000e74:	bf00      	nop
	// enqueue(&(kernel.queue), kernel.tcbArray[kernel.currTaskId].tid); No queue needed for EDF scheduler 

	__enable_irq();

	// Initiating a system call
	SCB->ICSR |= 1<<28; //control register bit for a PendSV interrupt
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <osYield+0xb4>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <osYield+0xb4>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	6053      	str	r3, [r2, #4]
	__asm("isb");
 8000e82:	f3bf 8f6f 	isb	sy

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000750 	.word	0x20000750
 8000e94:	20000758 	.word	0x20000758
 8000e98:	200004b8 	.word	0x200004b8
 8000e9c:	08003e34 	.word	0x08003e34
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <SVC_Handler_Main>:

// SVC Handler Main sets the PSP to the next task
void SVC_Handler_Main(unsigned int* svc_args)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	printf("T4\r\n");
 8000eac:	4834      	ldr	r0, [pc, #208]	@ (8000f80 <SVC_Handler_Main+0xdc>)
 8000eae:	f002 f943 	bl	8003138 <puts>
	printf("CurrTID: %d\r\n", kernel.currTaskId);
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4833      	ldr	r0, [pc, #204]	@ (8000f88 <SVC_Handler_Main+0xe4>)
 8000eba:	f002 f8d5 	bl	8003068 <iprintf>

	// Not context switching to another Task. Likely Main to T1
	if(kernel.currTaskId != -1) {
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d00f      	beq.n	8000ee8 <SVC_Handler_Main+0x44>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ec8:	f3ef 8309 	mrs	r3, PSP
 8000ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ece:	68f9      	ldr	r1, [r7, #12]
		kernel.tcbArray[kernel.currTaskId].stack_ptr = __get_PSP();
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000ed2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	492b      	ldr	r1, [pc, #172]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	335c      	adds	r3, #92	@ 0x5c
 8000ee4:	6018      	str	r0, [r3, #0]
 8000ee6:	e001      	b.n	8000eec <SVC_Handler_Main+0x48>
	} else { edfScheduler(); }
 8000ee8:	f000 f85e 	bl	8000fa8 <edfScheduler>

	printf("T5\r\n");
 8000eec:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <SVC_Handler_Main+0xe8>)
 8000eee:	f002 f923 	bl	8003138 <puts>

	// save current running task's context set task status back to ready from running
	if(kernel.currTaskId != -1) {
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efa:	d00a      	beq.n	8000f12 <SVC_Handler_Main+0x6e>
		kernel.tcbArray[kernel.currTaskId].state = READY;
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000efe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f00:	4920      	ldr	r1, [pc, #128]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3358      	adds	r3, #88	@ 0x58
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
	}

	// scheduler is run and next task is selected (from waiting kernel queue)
	// task_t nextTask = dequeue(&(kernel.queue)); // Change to EDFscheduler. Commented out since we will assign nextTask in the EDF scheduler
	kernel.currTaskId = nextTask;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <SVC_Handler_Main+0xec>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000f1a:	649a      	str	r2, [r3, #72]	@ 0x48

	printf("T6\r\n");
 8000f1c:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <SVC_Handler_Main+0xf0>)
 8000f1e:	f002 f90b 	bl	8003138 <puts>

	// set task status to running and resume execution
	kernel.tcbArray[nextTask].state = RUNNING;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <SVC_Handler_Main+0xec>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4917      	ldr	r1, [pc, #92]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3358      	adds	r3, #88	@ 0x58
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]

	printf("T7\r\n");
 8000f38:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <SVC_Handler_Main+0xf4>)
 8000f3a:	f002 f8fd 	bl	8003138 <puts>

	// Setting the PSP
	if(kernel.currTaskId == 0) {
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <SVC_Handler_Main+0xba>
		// currSP = kernel.tcbArray[nextTask].stack_ptr;
		// nullTask();
	} else { currSP = kernel.tcbArray[nextTask].stack_ptr; }
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <SVC_Handler_Main+0xec>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	490e      	ldr	r1, [pc, #56]	@ (8000f84 <SVC_Handler_Main+0xe0>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	335c      	adds	r3, #92	@ 0x5c
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <SVC_Handler_Main+0xf8>)
 8000f5c:	6013      	str	r3, [r2, #0]

	printf("T8\r\n");
 8000f5e:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <SVC_Handler_Main+0xfc>)
 8000f60:	f002 f8ea 	bl	8003138 <puts>
	__set_PSP(currSP);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <SVC_Handler_Main+0xf8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f383 8809 	msr	PSP, r3
}
 8000f70:	bf00      	nop

	printf("T9\r\n");
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <SVC_Handler_Main+0x100>)
 8000f74:	f002 f8e0 	bl	8003138 <puts>
	return;
 8000f78:	bf00      	nop
}
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08003e48 	.word	0x08003e48
 8000f84:	200004b8 	.word	0x200004b8
 8000f88:	08003e4c 	.word	0x08003e4c
 8000f8c:	08003e5c 	.word	0x08003e5c
 8000f90:	20000758 	.word	0x20000758
 8000f94:	08003e60 	.word	0x08003e60
 8000f98:	08003e64 	.word	0x08003e64
 8000f9c:	2000074c 	.word	0x2000074c
 8000fa0:	08003e68 	.word	0x08003e68
 8000fa4:	08003e6c 	.word	0x08003e6c

08000fa8 <edfScheduler>:

task_t edfScheduler() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
	printf("IN EDFSCHEDULER\r\n");
 8000fae:	4880      	ldr	r0, [pc, #512]	@ (80011b0 <edfScheduler+0x208>)
 8000fb0:	f002 f8c2 	bl	8003138 <puts>
	printf("ISRUNNING = %d\r\n", isRunning);
 8000fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80011b4 <edfScheduler+0x20c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	487f      	ldr	r0, [pc, #508]	@ (80011b8 <edfScheduler+0x210>)
 8000fbc:	f002 f854 	bl	8003068 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
	__disable_irq();
	isRunning = 1;
 8000fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80011b4 <edfScheduler+0x20c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
	// I think we need it because I think the EDF scheduler could potentially be retriggered before completing (meaning it won't actually run entirely)
	//disable interrupts so that the scheduler can finish finding the shortest deadline task
	task_t earliest = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i < MAX_TASKS; i++) {
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	e087      	b.n	80010e4 <edfScheduler+0x13c>
		// check over this logic michael: I added the else statement and kept the if statement for if the task is ready on the outside because we don't want
		// to decrement the deadline of a task that is sleeping, we only want to decrement the sleeping time for those tasks
		// first check if task is asleep then waking it up if the sleep time is over
		for(int i = 1; i < MAX_TASKS; i++) {
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	e07d      	b.n	80010d6 <edfScheduler+0x12e>
			// check over this logic michael: I added the else statement and kept the if statement for if the task is ready on the outside because we don't want
			// to decrement the deadline of a task that is sleeping, we only want to decrement the sleeping time for those tasks
			// first check if task is asleep then waking it up if the sleep time is over
			if(kernel.tcbArray[i].state == SLEEPING) {
 8000fda:	4978      	ldr	r1, [pc, #480]	@ (80011bc <edfScheduler+0x214>)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3358      	adds	r3, #88	@ 0x58
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d13f      	bne.n	8001070 <edfScheduler+0xc8>
				kernel.tcbArray[i].sleepingTime--; 	// Subtract 1ms from the sleeping time
 8000ff0:	4972      	ldr	r1, [pc, #456]	@ (80011bc <edfScheduler+0x214>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3368      	adds	r3, #104	@ 0x68
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1e59      	subs	r1, r3, #1
 8001004:	486d      	ldr	r0, [pc, #436]	@ (80011bc <edfScheduler+0x214>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4403      	add	r3, r0
 8001012:	3368      	adds	r3, #104	@ 0x68
 8001014:	6019      	str	r1, [r3, #0]
				if(kernel.tcbArray[i].sleepingTime == 0) { 								// Sleeping time is done
 8001016:	4969      	ldr	r1, [pc, #420]	@ (80011bc <edfScheduler+0x214>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	3368      	adds	r3, #104	@ 0x68
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d151      	bne.n	80010d0 <edfScheduler+0x128>
					kernel.tcbArray[i].state = READY; 									// Set the state back to ready
 800102c:	4963      	ldr	r1, [pc, #396]	@ (80011bc <edfScheduler+0x214>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3358      	adds	r3, #88	@ 0x58
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
					kernel.tcbArray[i].deadline = kernel.tcbArray[i].originalDeadline; 	// after the task wakes up, set deadline relative to time elapsed
 8001040:	495e      	ldr	r1, [pc, #376]	@ (80011bc <edfScheduler+0x214>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	336c      	adds	r3, #108	@ 0x6c
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	485a      	ldr	r0, [pc, #360]	@ (80011bc <edfScheduler+0x214>)
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4403      	add	r3, r0
 8001060:	3364      	adds	r3, #100	@ 0x64
 8001062:	6019      	str	r1, [r3, #0]
					sleepingTasks--;
 8001064:	4b56      	ldr	r3, [pc, #344]	@ (80011c0 <edfScheduler+0x218>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4a55      	ldr	r2, [pc, #340]	@ (80011c0 <edfScheduler+0x218>)
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e02f      	b.n	80010d0 <edfScheduler+0x128>
				}
			} else {
				// decrememt deadline for all tasks
				kernel.tcbArray[i].deadline--;
 8001070:	4952      	ldr	r1, [pc, #328]	@ (80011bc <edfScheduler+0x214>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3364      	adds	r3, #100	@ 0x64
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	484d      	ldr	r0, [pc, #308]	@ (80011bc <edfScheduler+0x214>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4403      	add	r3, r0
 8001092:	3364      	adds	r3, #100	@ 0x64
 8001094:	6019      	str	r1, [r3, #0]

				// reset the deadline if it is missed
				if(kernel.tcbArray[i].deadline <= 0) {
 8001096:	4949      	ldr	r1, [pc, #292]	@ (80011bc <edfScheduler+0x214>)
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3364      	adds	r3, #100	@ 0x64
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <edfScheduler+0x128>
					kernel.tcbArray[i].deadline = kernel.tcbArray[i].originalDeadline;
 80010ac:	4943      	ldr	r1, [pc, #268]	@ (80011bc <edfScheduler+0x214>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	336c      	adds	r3, #108	@ 0x6c
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	483f      	ldr	r0, [pc, #252]	@ (80011bc <edfScheduler+0x214>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	3364      	adds	r3, #100	@ 0x64
 80010ce:	6019      	str	r1, [r3, #0]
		for(int i = 1; i < MAX_TASKS; i++) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	f77f af7e 	ble.w	8000fda <edfScheduler+0x32>
	for(int i = 1; i < MAX_TASKS; i++) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f77f af74 	ble.w	8000fd4 <edfScheduler+0x2c>

		}

	}

	for(int i = 1; i < MAX_TASKS; i++) {
 80010ec:	2301      	movs	r3, #1
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	e04e      	b.n	8001190 <edfScheduler+0x1e8>
		if(kernel.tcbArray[i].state != SLEEPING && kernel.tcbArray[i].state != DORMANT) {
 80010f2:	4932      	ldr	r1, [pc, #200]	@ (80011bc <edfScheduler+0x214>)
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	3358      	adds	r3, #88	@ 0x58
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d040      	beq.n	800118a <edfScheduler+0x1e2>
 8001108:	492c      	ldr	r1, [pc, #176]	@ (80011bc <edfScheduler+0x214>)
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3358      	adds	r3, #88	@ 0x58
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d035      	beq.n	800118a <edfScheduler+0x1e2>
			if((kernel.tcbArray[i].deadline < kernel.tcbArray[earliest].deadline)
 800111e:	4927      	ldr	r1, [pc, #156]	@ (80011bc <edfScheduler+0x214>)
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	3364      	adds	r3, #100	@ 0x64
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	4822      	ldr	r0, [pc, #136]	@ (80011bc <edfScheduler+0x214>)
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4403      	add	r3, r0
 800113e:	3364      	adds	r3, #100	@ 0x64
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4299      	cmp	r1, r3
 8001144:	d31f      	bcc.n	8001186 <edfScheduler+0x1de>
			|| ((kernel.tcbArray[i].deadline == kernel.tcbArray[earliest].deadline) && kernel.tcbArray[i].tid < earliest)) {
 8001146:	491d      	ldr	r1, [pc, #116]	@ (80011bc <edfScheduler+0x214>)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	3364      	adds	r3, #100	@ 0x64
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	4818      	ldr	r0, [pc, #96]	@ (80011bc <edfScheduler+0x214>)
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4403      	add	r3, r0
 8001166:	3364      	adds	r3, #100	@ 0x64
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4299      	cmp	r1, r3
 800116c:	d10d      	bne.n	800118a <edfScheduler+0x1e2>
 800116e:	4913      	ldr	r1, [pc, #76]	@ (80011bc <edfScheduler+0x214>)
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3354      	adds	r3, #84	@ 0x54
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	429a      	cmp	r2, r3
 8001184:	d901      	bls.n	800118a <edfScheduler+0x1e2>
				earliest = i;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i < MAX_TASKS; i++) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	ddad      	ble.n	80010f2 <edfScheduler+0x14a>
			}
		}
	}

	nextTask = earliest;
 8001196:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <edfScheduler+0x21c>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6013      	str	r3, [r2, #0]
	printf("HELLO DONE EDF\r\n");
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <edfScheduler+0x220>)
 800119e:	f001 ffcb 	bl	8003138 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 80011a2:	b662      	cpsie	i
}
 80011a4:	bf00      	nop
	//enable interrupts so that now the task with the shortest deadline can preempt if needed
	__enable_irq();
	return earliest;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08003e70 	.word	0x08003e70
 80011b4:	20000754 	.word	0x20000754
 80011b8:	08003e84 	.word	0x08003e84
 80011bc:	200004b8 	.word	0x200004b8
 80011c0:	20000750 	.word	0x20000750
 80011c4:	20000758 	.word	0x20000758
 80011c8:	08003e98 	.word	0x08003e98

080011cc <Task1>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <Task1+0x2c>)
 80011d6:	f001 ffaf 	bl	8003138 <puts>
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e002      	b.n	80011e6 <Task1+0x1a>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011ec:	4293      	cmp	r3, r2
 80011ee:	ddf7      	ble.n	80011e0 <Task1+0x14>
 80011f0:	f7ff fdfc 	bl	8000dec <osYield>
 80011f4:	e7ee      	b.n	80011d4 <Task1+0x8>
 80011f6:	bf00      	nop
 80011f8:	08003ea8 	.word	0x08003ea8

080011fc <Task2>:
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4808      	ldr	r0, [pc, #32]	@ (8001228 <Task2+0x2c>)
 8001206:	f001 ff97 	bl	8003138 <puts>
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e002      	b.n	8001216 <Task2+0x1a>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f241 3287 	movw	r2, #4999	@ 0x1387
 800121c:	4293      	cmp	r3, r2
 800121e:	ddf7      	ble.n	8001210 <Task2+0x14>
 8001220:	f7ff fde4 	bl	8000dec <osYield>
 8001224:	e7ee      	b.n	8001204 <Task2+0x8>
 8001226:	bf00      	nop
 8001228:	08003eac 	.word	0x08003eac

0800122c <Task3>:
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <Task3+0x2c>)
 8001236:	f001 ff7f 	bl	8003138 <puts>
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e002      	b.n	8001246 <Task3+0x1a>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f241 3287 	movw	r2, #4999	@ 0x1387
 800124c:	4293      	cmp	r3, r2
 800124e:	ddf7      	ble.n	8001240 <Task3+0x14>
 8001250:	f7ff fdcc 	bl	8000dec <osYield>
 8001254:	e7ee      	b.n	8001234 <Task3+0x8>
 8001256:	bf00      	nop
 8001258:	08003eb0 	.word	0x08003eb0

0800125c <main>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	f000 faef 	bl	8001844 <HAL_Init>
 8001266:	f000 f9b9 	bl	80015dc <SystemClock_Config>
 800126a:	f000 fa4d 	bl	8001708 <MX_GPIO_Init>
 800126e:	f000 fa21 	bl	80016b4 <MX_USART2_UART_Init>
 8001272:	4816      	ldr	r0, [pc, #88]	@ (80012cc <main+0x70>)
 8001274:	f001 fef8 	bl	8003068 <iprintf>
 8001278:	f7ff fa86 	bl	8000788 <osKernelInit>
 800127c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001280:	81fb      	strh	r3, [r7, #14]
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0x74>)
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fba3 	bl	80009d4 <osCreateTask>
 800128e:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <main+0x78>)
 8001290:	f001 ff52 	bl	8003138 <puts>
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <main+0x7c>)
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	463b      	mov	r3, r7
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb9a 	bl	80009d4 <osCreateTask>
 80012a0:	480e      	ldr	r0, [pc, #56]	@ (80012dc <main+0x80>)
 80012a2:	f001 ff49 	bl	8003138 <puts>
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <main+0x84>)
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	463b      	mov	r3, r7
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fb91 	bl	80009d4 <osCreateTask>
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <main+0x88>)
 80012b4:	f001 ff40 	bl	8003138 <puts>
 80012b8:	f7ff fb3c 	bl	8000934 <osKernelStart>
 80012bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80012be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <main+0x8c>)
 80012c2:	f001 fed1 	bl	8003068 <iprintf>
 80012c6:	bf00      	nop
 80012c8:	e7fd      	b.n	80012c6 <main+0x6a>
 80012ca:	bf00      	nop
 80012cc:	08003eb4 	.word	0x08003eb4
 80012d0:	080011cd 	.word	0x080011cd
 80012d4:	08003ebc 	.word	0x08003ebc
 80012d8:	080011fd 	.word	0x080011fd
 80012dc:	08003ed4 	.word	0x08003ed4
 80012e0:	0800122d 	.word	0x0800122d
 80012e4:	08003eec 	.word	0x08003eec
 80012e8:	08003f04 	.word	0x08003f04

080012ec <HAL_MspInit>:
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2007      	movs	r0, #7
 800132c:	f000 fbae 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_UART_MspInit>:
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	@ (80013c0 <HAL_UART_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12b      	bne.n	80013b6 <HAL_UART_MspInit+0x7a>
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_UART_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	230c      	movs	r3, #12
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
 80013a6:	2307      	movs	r3, #7
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_UART_MspInit+0x8c>)
 80013b2:	f000 fb9f 	bl	8001af4 <HAL_GPIO_Init>
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140a:	f000 fa6d 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(isRunning) {
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <SysTick_Handler+0x3c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <SysTick_Handler+0x34>

//	SCB->ICSR |= 1<<28; //control register bit for a PendSV interrupt
//	__asm("isb");
    task_t nextTask = edfScheduler();
 8001416:	f7ff fdc7 	bl	8000fa8 <edfScheduler>
 800141a:	6078      	str	r0, [r7, #4]

    // if the edf scheduler finds a task with a shorter deadline then we want the current task to preempt to let the shorter deadline task run
    if (kernel.currTaskId != nextTask){
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <SysTick_Handler+0x40>)
 800141e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <SysTick_Handler+0x34>
      // osYield();
    	SCB->ICSR |= 1<<28; //control register bit for a PendSV interrupt
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <SysTick_Handler+0x44>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <SysTick_Handler+0x44>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6053      	str	r3, [r2, #4]
    	__asm("isb");
 8001434:	f3bf 8f6f 	isb	sy
    }
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000754 	.word	0x20000754
 8001444:	2000075c 	.word	0x2000075c
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <_read>:
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f889 	bl	80015b8 <__io_putchar>
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	2300      	movs	r3, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	2301      	movs	r3, #1
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	2300      	movs	r3, #0
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
 8001558:	f001 ff1c 	bl	8003394 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20018000 	.word	0x20018000
 8001588:	00004000 	.word	0x00004000
 800158c:	200009ec 	.word	0x200009ec
 8001590:	20000b88 	.word	0x20000b88

08001594 <SystemInit>:
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__io_putchar>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	1d39      	adds	r1, r7, #4
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	2201      	movs	r2, #1
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <__io_putchar+0x20>)
 80015ca:	f001 f916 	bl	80027fa <HAL_UART_Transmit>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200009f0 	.word	0x200009f0

080015dc <SystemClock_Config>:
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	@ 0x50
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2230      	movs	r2, #48	@ 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fe84 	bl	80032f8 <memset>
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <SystemClock_Config+0xd0>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	4a28      	ldr	r2, [pc, #160]	@ (80016ac <SystemClock_Config+0xd0>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001610:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <SystemClock_Config+0xd0>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <SystemClock_Config+0xd4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <SystemClock_Config+0xd4>)
 800162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <SystemClock_Config+0xd4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001644:	2310      	movs	r3, #16
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
 8001648:	2302      	movs	r3, #2
 800164a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001650:	2310      	movs	r3, #16
 8001652:	643b      	str	r3, [r7, #64]	@ 0x40
 8001654:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
 800165a:	2304      	movs	r3, #4
 800165c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800165e:	2307      	movs	r3, #7
 8001660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fbe2 	bl	8001e30 <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x9a>
 8001672:	f000 f8b7 	bl	80017e4 <Error_Handler>
 8001676:	230f      	movs	r3, #15
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fe44 	bl	8002320 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc6>
 800169e:	f000 f8a1 	bl	80017e4 <Error_Handler>
 80016a2:	bf00      	nop
 80016a4:	3750      	adds	r7, #80	@ 0x50
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_USART2_UART_Init>:
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f001 f838 	bl	8002760 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
 80016f6:	f000 f875 	bl	80017e4 <Error_Handler>
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200009f0 	.word	0x200009f0
 8001704:	40004400 	.word	0x40004400

08001708 <MX_GPIO_Init>:
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a2c      	ldr	r2, [pc, #176]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a25      	ldr	r2, [pc, #148]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_GPIO_Init+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	2120      	movs	r1, #32
 8001792:	4812      	ldr	r0, [pc, #72]	@ (80017dc <MX_GPIO_Init+0xd4>)
 8001794:	f000 fb32 	bl	8001dfc <HAL_GPIO_WritePin>
 8001798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <MX_GPIO_Init+0xd8>)
 80017b0:	f000 f9a0 	bl	8001af4 <HAL_GPIO_Init>
 80017b4:	2320      	movs	r3, #32
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <MX_GPIO_Init+0xd4>)
 80017cc:	f000 f992 	bl	8001af4 <HAL_GPIO_Init>
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	@ 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020800 	.word	0x40020800

080017e4 <Error_Handler>:
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	b672      	cpsid	i
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <Error_Handler+0x8>

080017f0 <Reset_Handler>:
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopFillZerobss+0x12>
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <LoopFillZerobss+0x16>)
 80017f6:	490e      	ldr	r1, [pc, #56]	@ (8001830 <LoopFillZerobss+0x1a>)
 80017f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001834 <LoopFillZerobss+0x1e>)
 80017fa:	2300      	movs	r3, #0
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:
 80017fe:	58d4      	ldr	r4, [r2, r3]
 8001800:	50c4      	str	r4, [r0, r3]
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:
 8001804:	18c4      	adds	r4, r0, r3
 8001806:	428c      	cmp	r4, r1
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
 800180a:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <LoopFillZerobss+0x22>)
 800180c:	4c0b      	ldr	r4, [pc, #44]	@ (800183c <LoopFillZerobss+0x26>)
 800180e:	2300      	movs	r3, #0
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:
 8001816:	42a2      	cmp	r2, r4
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>
 800181a:	f7ff febb 	bl	8001594 <SystemInit>
 800181e:	f001 fdbf 	bl	80033a0 <__libc_init_array>
 8001822:	f7ff fd1b 	bl	800125c <main>
 8001826:	4770      	bx	lr
 8001828:	20018000 	.word	0x20018000
 800182c:	20000000 	.word	0x20000000
 8001830:	20000068 	.word	0x20000068
 8001834:	08003f70 	.word	0x08003f70
 8001838:	20000068 	.word	0x20000068
 800183c:	20000b84 	.word	0x20000b84

08001840 <ADC_IRQHandler>:
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f90d 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>
 8001878:	f7ff fd38 	bl	80012ec <HAL_MspInit>
 800187c:	2300      	movs	r3, #0
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f917 	bl	8001ada <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f8ed 	bl	8001aa2 <HAL_NVIC_SetPriority>
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
 80018d2:	2301      	movs	r3, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	20000a34 	.word	0x20000a34

08001910 <HAL_GetTick>:
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000a34 	.word	0x20000a34

08001928 <__NVIC_SetPriorityGrouping>:
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_SetPriority>:
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff47 	bl	8001928 <__NVIC_SetPriorityGrouping>
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	f7ff ff5c 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffb0 	bl	8001a48 <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_GPIO_Init>:
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	@ 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e159      	b.n	8001dc4 <HAL_GPIO_Init+0x2d0>
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8148 	bne.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x52>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a56      	ldr	r2, [pc, #344]	@ (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	@ (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x202>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	@ (8001de8 <HAL_GPIO_Init+0x2f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x1fe>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a47      	ldr	r2, [pc, #284]	@ (8001dec <HAL_GPIO_Init+0x2f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a46      	ldr	r2, [pc, #280]	@ (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x1f6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a45      	ldr	r2, [pc, #276]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x1f2>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	4935      	ldr	r1, [pc, #212]	@ (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x246>
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x270>
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x29a>
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2c4>
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f aea2 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_WritePin>:
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_RCC_OscConfig>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e267      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d075      	beq.n	8001f3a <HAL_RCC_OscConfig+0x10a>
 8001e4e:	4b88      	ldr	r3, [pc, #544]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d00c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x44>
 8001e5a:	4b85      	ldr	r3, [pc, #532]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d112      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5c>
 8001e66:	4b82      	ldr	r3, [pc, #520]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5c>
 8001e74:	4b7e      	ldr	r3, [pc, #504]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x108>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d157      	bne.n	8001f38 <HAL_RCC_OscConfig+0x108>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e242      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e94:	d106      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x74>
 8001e96:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001eae:	4b70      	ldr	r3, [pc, #448]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6d      	ldr	r3, [pc, #436]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	4b69      	ldr	r3, [pc, #420]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a65      	ldr	r2, [pc, #404]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe0>
 8001ee8:	f7ff fd12 	bl	8001910 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xd2>
 8001ef0:	f7ff fd0e 	bl	8001910 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xd2>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e207      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001f02:	4b5b      	ldr	r3, [pc, #364]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
 8001f10:	f7ff fcfe 	bl	8001910 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xfa>
 8001f18:	f7ff fcfa 	bl	8001910 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xfa>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1f3      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001f2a:	4b51      	ldr	r3, [pc, #324]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0xe8>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
 8001f38:	bf00      	nop
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d063      	beq.n	800200e <HAL_RCC_OscConfig+0x1de>
 8001f46:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x13a>
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x168>
 8001f5e:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x168>
 8001f6a:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x152>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x152>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e1c7      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4937      	ldr	r1, [pc, #220]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
 8001f96:	e03a      	b.n	800200e <HAL_RCC_OscConfig+0x1de>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_RCC_OscConfig+0x244>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f7ff fcb3 	bl	8001910 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x190>
 8001fae:	f7ff fcaf 	bl	8001910 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x190>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1a8      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x17e>
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4925      	ldr	r1, [pc, #148]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x1de>
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_RCC_OscConfig+0x244>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f7ff fc92 	bl	8001910 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x1d2>
 8001ff0:	f7ff fc8e 	bl	8001910 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x1d2>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e187      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002002:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1c0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_RCC_OscConfig+0x258>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCC_OscConfig+0x220>
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_RCC_OscConfig+0x248>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f7ff fc72 	bl	8001910 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
 8002030:	f7ff fc6e 	bl	8001910 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x212>
 800203e:	2303      	movs	r3, #3
 8002040:	e167      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_OscConfig+0x240>)
 8002044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x200>
 800204e:	e01b      	b.n	8002088 <HAL_RCC_OscConfig+0x258>
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_OscConfig+0x248>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f7ff fc5b 	bl	8001910 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]
 800205c:	e00e      	b.n	800207c <HAL_RCC_OscConfig+0x24c>
 800205e:	f7ff fc57 	bl	8001910 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d907      	bls.n	800207c <HAL_RCC_OscConfig+0x24c>
 800206c:	2303      	movs	r3, #3
 800206e:	e150      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002070:	40023800 	.word	0x40023800
 8002074:	42470000 	.word	0x42470000
 8002078:	42470e80 	.word	0x42470e80
 800207c:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ea      	bne.n	800205e <HAL_RCC_OscConfig+0x22e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8097 	beq.w	80021c4 <HAL_RCC_OscConfig+0x394>
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
 800209a:	4b81      	ldr	r3, [pc, #516]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_RCC_OscConfig+0x296>
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b7d      	ldr	r3, [pc, #500]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	4a7c      	ldr	r2, [pc, #496]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b6:	4b7a      	ldr	r3, [pc, #488]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
 80020c6:	4b77      	ldr	r3, [pc, #476]	@ (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2d4>
 80020d2:	4b74      	ldr	r3, [pc, #464]	@ (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a73      	ldr	r2, [pc, #460]	@ (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	f7ff fc17 	bl	8001910 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
 80020e6:	f7ff fc13 	bl	8001910 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e10c      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 80020f8:	4b6a      	ldr	r3, [pc, #424]	@ (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2b6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x2ea>
 800210c:	4b64      	ldr	r3, [pc, #400]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	4a63      	ldr	r2, [pc, #396]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	@ 0x70
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x324>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x30c>
 8002122:	4b5f      	ldr	r3, [pc, #380]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a5e      	ldr	r2, [pc, #376]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70
 800212e:	4b5c      	ldr	r3, [pc, #368]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	4a5b      	ldr	r2, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	@ 0x70
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x324>
 800213c:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4a57      	ldr	r2, [pc, #348]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	@ 0x70
 8002148:	4b55      	ldr	r3, [pc, #340]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214c:	4a54      	ldr	r2, [pc, #336]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	@ 0x70
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_RCC_OscConfig+0x358>
 800215c:	f7ff fbd8 	bl	8001910 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x34a>
 8002164:	f7ff fbd4 	bl	8001910 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x34a>
 8002176:	2303      	movs	r3, #3
 8002178:	e0cb      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 800217a:	4b49      	ldr	r3, [pc, #292]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ee      	beq.n	8002164 <HAL_RCC_OscConfig+0x334>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x382>
 8002188:	f7ff fbc2 	bl	8001910 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x376>
 8002190:	f7ff fbbe 	bl	8001910 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x376>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0b5      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 80021a6:	4b3e      	ldr	r3, [pc, #248]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ee      	bne.n	8002190 <HAL_RCC_OscConfig+0x360>
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x394>
 80021b8:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	4a38      	ldr	r2, [pc, #224]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a1 	beq.w	8002310 <HAL_RCC_OscConfig+0x4e0>
 80021ce:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d05c      	beq.n	8002294 <HAL_RCC_OscConfig+0x464>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d141      	bne.n	8002266 <HAL_RCC_OscConfig+0x436>
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_RCC_OscConfig+0x478>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f7ff fb92 	bl	8001910 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x3d2>
 80021f0:	f7ff fb8e 	bl	8001910 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3d2>
 80021fe:	2303      	movs	r3, #3
 8002200:	e087      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002202:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	491b      	ldr	r1, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x478>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f7ff fb67 	bl	8001910 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x428>
 8002246:	f7ff fb63 	bl	8001910 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x428>
 8002254:	2303      	movs	r3, #3
 8002256:	e05c      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x416>
 8002264:	e054      	b.n	8002310 <HAL_RCC_OscConfig+0x4e0>
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_RCC_OscConfig+0x478>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f7ff fb50 	bl	8001910 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x456>
 8002274:	f7ff fb4c 	bl	8001910 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x456>
 8002282:	2303      	movs	r3, #3
 8002284:	e045      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x444>
 8002292:	e03d      	b.n	8002310 <HAL_RCC_OscConfig+0x4e0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x47c>
 800229c:	2301      	movs	r3, #1
 800229e:	e038      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42470060 	.word	0x42470060
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x4ec>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d028      	beq.n	800230c <HAL_RCC_OscConfig+0x4dc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d121      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11a      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022e2:	0192      	lsls	r2, r2, #6
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d111      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x4e0>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002310:	2300      	movs	r3, #0
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_RCC_ClockConfig>:
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
 8002330:	2301      	movs	r3, #1
 8002332:	e0cc      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 8002334:	4b68      	ldr	r3, [pc, #416]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d90c      	bls.n	800235c <HAL_RCC_ClockConfig+0x3c>
 8002342:	4b65      	ldr	r3, [pc, #404]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x3c>
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x8a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x60>
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x78>
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002396:	6093      	str	r3, [r2, #8]
 8002398:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d044      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xae>
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_ClockConfig+0xbe>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
 80023de:	4b3f      	ldr	r3, [pc, #252]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 80023ee:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e067      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 80023fe:	4b37      	ldr	r3, [pc, #220]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4934      	ldr	r1, [pc, #208]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	f7ff fa7e 	bl	8001910 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
 8002418:	f7ff fa7a 	bl	8001910 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
 800242a:	2303      	movs	r3, #3
 800242c:	e04f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 800242e:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
 8002440:	4b25      	ldr	r3, [pc, #148]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d20c      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x148>
 800244e:	4b22      	ldr	r3, [pc, #136]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x148>
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x166>
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x186>
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f9de 	bl	8001888 <HAL_InitTick>
 80024cc:	2300      	movs	r3, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08003f14 	.word	0x08003f14
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b094      	sub	sp, #80	@ 0x50
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	2300      	movs	r3, #0
 80024f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f8:	2300      	movs	r3, #0
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024fc:	2300      	movs	r3, #0
 80024fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002500:	2300      	movs	r3, #0
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002504:	4b79      	ldr	r3, [pc, #484]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d00d      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x40>
 8002510:	2b08      	cmp	r3, #8
 8002512:	f200 80e1 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x34>
 800251a:	2b04      	cmp	r3, #4
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x3a>
 800251e:	e0db      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002520:	4b73      	ldr	r3, [pc, #460]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002524:	e0db      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
 8002526:	4b73      	ldr	r3, [pc, #460]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800252a:	e0d8      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002534:	647b      	str	r3, [r7, #68]	@ 0x44
 8002536:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x11e>
 8002542:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	2200      	movs	r2, #0
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800254c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800254e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002554:	633b      	str	r3, [r7, #48]	@ 0x30
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	@ 0x34
 800255a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4621      	mov	r1, r4
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	6139      	str	r1, [r7, #16]
 800257c:	4629      	mov	r1, r5
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002590:	4659      	mov	r1, fp
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259a:	4651      	mov	r1, sl
 800259c:	018a      	lsls	r2, r1, #6
 800259e:	4651      	mov	r1, sl
 80025a0:	ebb2 0801 	subs.w	r8, r2, r1
 80025a4:	4659      	mov	r1, fp
 80025a6:	eb63 0901 	sbc.w	r9, r3, r1
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025be:	4690      	mov	r8, r2
 80025c0:	4699      	mov	r9, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	eb18 0303 	adds.w	r3, r8, r3
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	462b      	mov	r3, r5
 80025cc:	eb49 0303 	adc.w	r3, r9, r3
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025de:	4629      	mov	r1, r5
 80025e0:	024b      	lsls	r3, r1, #9
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025e8:	4621      	mov	r1, r4
 80025ea:	024a      	lsls	r2, r1, #9
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f2:	2200      	movs	r2, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025fc:	f7fd fe58 	bl	80002b0 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002608:	e058      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x1d0>
 800260a:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	2200      	movs	r2, #0
 8002612:	4618      	mov	r0, r3
 8002614:	4611      	mov	r1, r2
 8002616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002624:	4642      	mov	r2, r8
 8002626:	464b      	mov	r3, r9
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0159      	lsls	r1, r3, #5
 8002632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002636:	0150      	lsls	r0, r2, #5
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4641      	mov	r1, r8
 800263e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb63 0b01 	sbc.w	fp, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800265c:	ebb2 040a 	subs.w	r4, r2, sl
 8002660:	eb63 050b 	sbc.w	r5, r3, fp
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	00eb      	lsls	r3, r5, #3
 800266e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	4614      	mov	r4, r2
 8002676:	461d      	mov	r5, r3
 8002678:	4643      	mov	r3, r8
 800267a:	18e3      	adds	r3, r4, r3
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	464b      	mov	r3, r9
 8002680:	eb45 0303 	adc.w	r3, r5, r3
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002692:	4629      	mov	r1, r5
 8002694:	028b      	lsls	r3, r1, #10
 8002696:	4621      	mov	r1, r4
 8002698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800269c:	4621      	mov	r1, r4
 800269e:	028a      	lsls	r2, r1, #10
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a6:	2200      	movs	r2, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	61fa      	str	r2, [r7, #28]
 80026ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b0:	f7fd fdfe 	bl	80002b0 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026bc:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80026cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026dc:	bf00      	nop
 80026de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e0:	4618      	mov	r0, r3
 80026e2:	3750      	adds	r7, #80	@ 0x50
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <HAL_RCC_GetHCLKFreq>:
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	@ (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08003f24 	.word	0x08003f24

08002738 <HAL_RCC_GetPCLK2Freq>:
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	@ (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08003f24 	.word	0x08003f24

08002760 <HAL_UART_Init>:
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
 800276e:	2301      	movs	r3, #1
 8002770:	e03f      	b.n	80027f2 <HAL_UART_Init+0x92>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fdd8 	bl	800133c <HAL_UART_MspInit>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	@ 0x24
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f929 	bl	80029fc <UART_SetConfig>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f0:	2300      	movs	r3, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_UART_Transmit>:
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b08a      	sub	sp, #40	@ 0x28
 80027fe:	af02      	add	r7, sp, #8
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	d17c      	bne.n	8002914 <HAL_UART_Transmit+0x11a>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_UART_Transmit+0x2c>
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Transmit+0x30>
 8002826:	2301      	movs	r3, #1
 8002828:	e075      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_UART_Transmit+0x3e>
 8002834:	2302      	movs	r3, #2
 8002836:	e06e      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	@ 0x21
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800284e:	f7ff f85f 	bl	8001910 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	849a      	strh	r2, [r3, #36]	@ 0x24
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002868:	d108      	bne.n	800287c <HAL_UART_Transmit+0x82>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Transmit+0x82>
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e003      	b.n	8002884 <HAL_UART_Transmit+0x8a>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800288c:	e02a      	b.n	80028e4 <HAL_UART_Transmit+0xea>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	@ 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f840 	bl	800291e <UART_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_Transmit+0xae>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e036      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_UART_Transmit+0xcc>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3302      	adds	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e007      	b.n	80028d6 <HAL_UART_Transmit+0xdc>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	84da      	strh	r2, [r3, #38]	@ 0x26
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1cf      	bne.n	800288e <HAL_UART_Transmit+0x94>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2140      	movs	r1, #64	@ 0x40
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f810 	bl	800291e <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_Transmit+0x10e>
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_UART_Transmit+0x11c>
 8002914:	2302      	movs	r3, #2
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <UART_WaitOnFlagUntilTimeout>:
 800291e:	b580      	push	{r7, lr}
 8002920:	b090      	sub	sp, #64	@ 0x40
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	71fb      	strb	r3, [r7, #7]
 800292e:	e050      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d04c      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xb4>
 8002938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x30>
 800293e:	f7fe ffe7 	bl	8001910 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800294a:	429a      	cmp	r2, r3
 800294c:	d241      	bcs.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xb4>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800296e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
 8002972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <UART_WaitOnFlagUntilTimeout+0x30>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3314      	adds	r3, #20
 80029a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029a2:	623a      	str	r2, [r7, #32]
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	69f9      	ldr	r1, [r7, #28]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <UART_WaitOnFlagUntilTimeout+0x64>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029ce:	2303      	movs	r3, #3
 80029d0:	e00f      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xd4>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d09f      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x12>
 80029f0:	2300      	movs	r3, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	3740      	adds	r7, #64	@ 0x40
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <UART_SetConfig>:
 80029fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a00:	b0c0      	sub	sp, #256	@ 0x100
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	ea40 0301 	orr.w	r3, r0, r1
 8002a24:	6113      	str	r3, [r2, #16]
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a54:	f021 010c 	bic.w	r1, r1, #12
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a62:	430b      	orrs	r3, r1
 8002a64:	60d3      	str	r3, [r2, #12]
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	6999      	ldr	r1, [r3, #24]
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	ea40 0301 	orr.w	r3, r0, r1
 8002a82:	6153      	str	r3, [r2, #20]
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc8 <UART_SetConfig+0x2cc>)
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d005      	beq.n	8002a9c <UART_SetConfig+0xa0>
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <UART_SetConfig+0x2d0>)
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d104      	bne.n	8002aa6 <UART_SetConfig+0xaa>
 8002a9c:	f7ff fe4c 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8002aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002aa4:	e003      	b.n	8002aae <UART_SetConfig+0xb2>
 8002aa6:	f7ff fe33 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8002aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab8:	f040 810c 	bne.w	8002cd4 <UART_SetConfig+0x2d8>
 8002abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ace:	4622      	mov	r2, r4
 8002ad0:	462b      	mov	r3, r5
 8002ad2:	1891      	adds	r1, r2, r2
 8002ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ad6:	415b      	adcs	r3, r3
 8002ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ade:	4621      	mov	r1, r4
 8002ae0:	eb12 0801 	adds.w	r8, r2, r1
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	eb43 0901 	adc.w	r9, r3, r1
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002afe:	4690      	mov	r8, r2
 8002b00:	4699      	mov	r9, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	eb18 0303 	adds.w	r3, r8, r3
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b0c:	462b      	mov	r3, r5
 8002b0e:	eb49 0303 	adc.w	r3, r9, r3
 8002b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	18db      	adds	r3, r3, r3
 8002b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b30:	4613      	mov	r3, r2
 8002b32:	eb42 0303 	adc.w	r3, r2, r3
 8002b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b40:	f7fd fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <UART_SetConfig+0x2d4>)
 8002b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	011c      	lsls	r4, r3, #4
 8002b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b64:	4642      	mov	r2, r8
 8002b66:	464b      	mov	r3, r9
 8002b68:	1891      	adds	r1, r2, r2
 8002b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b6c:	415b      	adcs	r3, r3
 8002b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b74:	4641      	mov	r1, r8
 8002b76:	eb12 0a01 	adds.w	sl, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b94:	4692      	mov	sl, r2
 8002b96:	469b      	mov	fp, r3
 8002b98:	4643      	mov	r3, r8
 8002b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	18db      	adds	r3, r3, r3
 8002bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	eb42 0303 	adc.w	r3, r2, r3
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bd6:	f7fd fb6b 	bl	80002b0 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <UART_SetConfig+0x2d4>)
 8002be2:	fba3 2301 	umull	r2, r3, r3, r1
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2264      	movs	r2, #100	@ 0x64
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	1acb      	subs	r3, r1, r3
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bf6:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <UART_SetConfig+0x2d4>)
 8002bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c04:	441c      	add	r4, r3
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c20:	415b      	adcs	r3, r3
 8002c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c28:	4641      	mov	r1, r8
 8002c2a:	1851      	adds	r1, r2, r1
 8002c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c2e:	4649      	mov	r1, r9
 8002c30:	414b      	adcs	r3, r1
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c40:	4659      	mov	r1, fp
 8002c42:	00cb      	lsls	r3, r1, #3
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	00ca      	lsls	r2, r1, #3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	4642      	mov	r2, r8
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	460a      	mov	r2, r1
 8002c60:	eb42 0303 	adc.w	r3, r2, r3
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	18db      	adds	r3, r3, r3
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c82:	4613      	mov	r3, r2
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c92:	f7fd fb0d 	bl	80002b0 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <UART_SetConfig+0x2d4>)
 8002c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	2164      	movs	r1, #100	@ 0x64
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	3332      	adds	r3, #50	@ 0x32
 8002cae:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <UART_SetConfig+0x2d4>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	f003 0207 	and.w	r2, r3, #7
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4422      	add	r2, r4
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e106      	b.n	8002ed4 <UART_SetConfig+0x4d8>
 8002cc6:	bf00      	nop
 8002cc8:	40011000 	.word	0x40011000
 8002ccc:	40011400 	.word	0x40011400
 8002cd0:	51eb851f 	.word	0x51eb851f
 8002cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	464b      	mov	r3, r9
 8002cea:	1891      	adds	r1, r2, r2
 8002cec:	6239      	str	r1, [r7, #32]
 8002cee:	415b      	adcs	r3, r3
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	1854      	adds	r4, r2, r1
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	eb43 0501 	adc.w	r5, r3, r1
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	00eb      	lsls	r3, r5, #3
 8002d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0e:	00e2      	lsls	r2, r4, #3
 8002d10:	4614      	mov	r4, r2
 8002d12:	461d      	mov	r5, r3
 8002d14:	4643      	mov	r3, r8
 8002d16:	18e3      	adds	r3, r4, r3
 8002d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	eb45 0303 	adc.w	r3, r5, r3
 8002d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d42:	4629      	mov	r1, r5
 8002d44:	008b      	lsls	r3, r1, #2
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	008a      	lsls	r2, r1, #2
 8002d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d54:	f7fd faac 	bl	80002b0 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4b60      	ldr	r3, [pc, #384]	@ (8002ee0 <UART_SetConfig+0x4e4>)
 8002d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	011c      	lsls	r4, r3, #4
 8002d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	1891      	adds	r1, r2, r2
 8002d7e:	61b9      	str	r1, [r7, #24]
 8002d80:	415b      	adcs	r3, r3
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d88:	4641      	mov	r1, r8
 8002d8a:	1851      	adds	r1, r2, r1
 8002d8c:	6139      	str	r1, [r7, #16]
 8002d8e:	4649      	mov	r1, r9
 8002d90:	414b      	adcs	r3, r1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da0:	4659      	mov	r1, fp
 8002da2:	00cb      	lsls	r3, r1, #3
 8002da4:	4651      	mov	r1, sl
 8002da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002daa:	4651      	mov	r1, sl
 8002dac:	00ca      	lsls	r2, r1, #3
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4642      	mov	r2, r8
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	eb42 0303 	adc.w	r3, r2, r3
 8002dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002de0:	4649      	mov	r1, r9
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	4641      	mov	r1, r8
 8002de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dea:	4641      	mov	r1, r8
 8002dec:	008a      	lsls	r2, r1, #2
 8002dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002df2:	f7fd fa5d 	bl	80002b0 <__aeabi_uldivmod>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <UART_SetConfig+0x4e4>)
 8002dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2264      	movs	r2, #100	@ 0x64
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	1acb      	subs	r3, r1, r3
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	3332      	adds	r3, #50	@ 0x32
 8002e10:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <UART_SetConfig+0x4e4>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e1c:	441c      	add	r4, r3
 8002e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e22:	2200      	movs	r2, #0
 8002e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	464b      	mov	r3, r9
 8002e30:	1891      	adds	r1, r2, r2
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	1851      	adds	r1, r2, r1
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	4649      	mov	r1, r9
 8002e44:	414b      	adcs	r3, r1
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e54:	4659      	mov	r1, fp
 8002e56:	00cb      	lsls	r3, r1, #3
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5e:	4651      	mov	r1, sl
 8002e60:	00ca      	lsls	r2, r1, #3
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e6e:	464b      	mov	r3, r9
 8002e70:	460a      	mov	r2, r1
 8002e72:	eb42 0303 	adc.w	r3, r2, r3
 8002e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e90:	4649      	mov	r1, r9
 8002e92:	008b      	lsls	r3, r1, #2
 8002e94:	4641      	mov	r1, r8
 8002e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	008a      	lsls	r2, r1, #2
 8002e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ea2:	f7fd fa05 	bl	80002b0 <__aeabi_uldivmod>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <UART_SetConfig+0x4e4>)
 8002eac:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	2164      	movs	r1, #100	@ 0x64
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	3332      	adds	r3, #50	@ 0x32
 8002ebe:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <UART_SetConfig+0x4e4>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4422      	add	r2, r4
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	bf00      	nop
 8002ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee0:	51eb851f 	.word	0x51eb851f

08002ee4 <std>:
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	4604      	mov	r4, r0
 8002eea:	e9c0 3300 	strd	r3, r3, [r0]
 8002eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ef2:	6083      	str	r3, [r0, #8]
 8002ef4:	8181      	strh	r1, [r0, #12]
 8002ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ef8:	81c2      	strh	r2, [r0, #14]
 8002efa:	6183      	str	r3, [r0, #24]
 8002efc:	4619      	mov	r1, r3
 8002efe:	2208      	movs	r2, #8
 8002f00:	305c      	adds	r0, #92	@ 0x5c
 8002f02:	f000 f9f9 	bl	80032f8 <memset>
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <std+0x58>)
 8002f08:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <std+0x5c>)
 8002f0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <std+0x60>)
 8002f10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <std+0x64>)
 8002f14:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <std+0x68>)
 8002f18:	6224      	str	r4, [r4, #32]
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d006      	beq.n	8002f2c <std+0x48>
 8002f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f22:	4294      	cmp	r4, r2
 8002f24:	d002      	beq.n	8002f2c <std+0x48>
 8002f26:	33d0      	adds	r3, #208	@ 0xd0
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d105      	bne.n	8002f38 <std+0x54>
 8002f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f34:	f000 ba58 	b.w	80033e8 <__retarget_lock_init_recursive>
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08003149 	.word	0x08003149
 8002f40:	0800316b 	.word	0x0800316b
 8002f44:	080031a3 	.word	0x080031a3
 8002f48:	080031c7 	.word	0x080031c7
 8002f4c:	20000a38 	.word	0x20000a38

08002f50 <stdio_exit_handler>:
 8002f50:	4a02      	ldr	r2, [pc, #8]	@ (8002f5c <stdio_exit_handler+0xc>)
 8002f52:	4903      	ldr	r1, [pc, #12]	@ (8002f60 <stdio_exit_handler+0x10>)
 8002f54:	4803      	ldr	r0, [pc, #12]	@ (8002f64 <stdio_exit_handler+0x14>)
 8002f56:	f000 b869 	b.w	800302c <_fwalk_sglue>
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	08003c89 	.word	0x08003c89
 8002f64:	2000001c 	.word	0x2000001c

08002f68 <cleanup_stdio>:
 8002f68:	6841      	ldr	r1, [r0, #4]
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <cleanup_stdio+0x34>)
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	4604      	mov	r4, r0
 8002f72:	d001      	beq.n	8002f78 <cleanup_stdio+0x10>
 8002f74:	f000 fe88 	bl	8003c88 <_fflush_r>
 8002f78:	68a1      	ldr	r1, [r4, #8]
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <cleanup_stdio+0x38>)
 8002f7c:	4299      	cmp	r1, r3
 8002f7e:	d002      	beq.n	8002f86 <cleanup_stdio+0x1e>
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 fe81 	bl	8003c88 <_fflush_r>
 8002f86:	68e1      	ldr	r1, [r4, #12]
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <cleanup_stdio+0x3c>)
 8002f8a:	4299      	cmp	r1, r3
 8002f8c:	d004      	beq.n	8002f98 <cleanup_stdio+0x30>
 8002f8e:	4620      	mov	r0, r4
 8002f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f94:	f000 be78 	b.w	8003c88 <_fflush_r>
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000a38 	.word	0x20000a38
 8002fa0:	20000aa0 	.word	0x20000aa0
 8002fa4:	20000b08 	.word	0x20000b08

08002fa8 <global_stdio_init.part.0>:
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <global_stdio_init.part.0+0x30>)
 8002fac:	4c0b      	ldr	r4, [pc, #44]	@ (8002fdc <global_stdio_init.part.0+0x34>)
 8002fae:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe0 <global_stdio_init.part.0+0x38>)
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	f7ff ff94 	bl	8002ee4 <std>
 8002fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2109      	movs	r1, #9
 8002fc4:	f7ff ff8e 	bl	8002ee4 <std>
 8002fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fcc:	2202      	movs	r2, #2
 8002fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd2:	2112      	movs	r1, #18
 8002fd4:	f7ff bf86 	b.w	8002ee4 <std>
 8002fd8:	20000b70 	.word	0x20000b70
 8002fdc:	20000a38 	.word	0x20000a38
 8002fe0:	08002f51 	.word	0x08002f51

08002fe4 <__sfp_lock_acquire>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	@ (8002fec <__sfp_lock_acquire+0x8>)
 8002fe6:	f000 ba00 	b.w	80033ea <__retarget_lock_acquire_recursive>
 8002fea:	bf00      	nop
 8002fec:	20000b79 	.word	0x20000b79

08002ff0 <__sfp_lock_release>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	@ (8002ff8 <__sfp_lock_release+0x8>)
 8002ff2:	f000 b9fb 	b.w	80033ec <__retarget_lock_release_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	20000b79 	.word	0x20000b79

08002ffc <__sinit>:
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	4604      	mov	r4, r0
 8003000:	f7ff fff0 	bl	8002fe4 <__sfp_lock_acquire>
 8003004:	6a23      	ldr	r3, [r4, #32]
 8003006:	b11b      	cbz	r3, 8003010 <__sinit+0x14>
 8003008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800300c:	f7ff bff0 	b.w	8002ff0 <__sfp_lock_release>
 8003010:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <__sinit+0x28>)
 8003012:	6223      	str	r3, [r4, #32]
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__sinit+0x2c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f5      	bne.n	8003008 <__sinit+0xc>
 800301c:	f7ff ffc4 	bl	8002fa8 <global_stdio_init.part.0>
 8003020:	e7f2      	b.n	8003008 <__sinit+0xc>
 8003022:	bf00      	nop
 8003024:	08002f69 	.word	0x08002f69
 8003028:	20000b70 	.word	0x20000b70

0800302c <_fwalk_sglue>:
 800302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003030:	4607      	mov	r7, r0
 8003032:	4688      	mov	r8, r1
 8003034:	4614      	mov	r4, r2
 8003036:	2600      	movs	r6, #0
 8003038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800303c:	f1b9 0901 	subs.w	r9, r9, #1
 8003040:	d505      	bpl.n	800304e <_fwalk_sglue+0x22>
 8003042:	6824      	ldr	r4, [r4, #0]
 8003044:	2c00      	cmp	r4, #0
 8003046:	d1f7      	bne.n	8003038 <_fwalk_sglue+0xc>
 8003048:	4630      	mov	r0, r6
 800304a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d907      	bls.n	8003064 <_fwalk_sglue+0x38>
 8003054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003058:	3301      	adds	r3, #1
 800305a:	d003      	beq.n	8003064 <_fwalk_sglue+0x38>
 800305c:	4629      	mov	r1, r5
 800305e:	4638      	mov	r0, r7
 8003060:	47c0      	blx	r8
 8003062:	4306      	orrs	r6, r0
 8003064:	3568      	adds	r5, #104	@ 0x68
 8003066:	e7e9      	b.n	800303c <_fwalk_sglue+0x10>

08003068 <iprintf>:
 8003068:	b40f      	push	{r0, r1, r2, r3}
 800306a:	b507      	push	{r0, r1, r2, lr}
 800306c:	4906      	ldr	r1, [pc, #24]	@ (8003088 <iprintf+0x20>)
 800306e:	ab04      	add	r3, sp, #16
 8003070:	6808      	ldr	r0, [r1, #0]
 8003072:	f853 2b04 	ldr.w	r2, [r3], #4
 8003076:	6881      	ldr	r1, [r0, #8]
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	f000 fadb 	bl	8003634 <_vfiprintf_r>
 800307e:	b003      	add	sp, #12
 8003080:	f85d eb04 	ldr.w	lr, [sp], #4
 8003084:	b004      	add	sp, #16
 8003086:	4770      	bx	lr
 8003088:	20000018 	.word	0x20000018

0800308c <_puts_r>:
 800308c:	6a03      	ldr	r3, [r0, #32]
 800308e:	b570      	push	{r4, r5, r6, lr}
 8003090:	6884      	ldr	r4, [r0, #8]
 8003092:	4605      	mov	r5, r0
 8003094:	460e      	mov	r6, r1
 8003096:	b90b      	cbnz	r3, 800309c <_puts_r+0x10>
 8003098:	f7ff ffb0 	bl	8002ffc <__sinit>
 800309c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800309e:	07db      	lsls	r3, r3, #31
 80030a0:	d405      	bmi.n	80030ae <_puts_r+0x22>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	0598      	lsls	r0, r3, #22
 80030a6:	d402      	bmi.n	80030ae <_puts_r+0x22>
 80030a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030aa:	f000 f99e 	bl	80033ea <__retarget_lock_acquire_recursive>
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	0719      	lsls	r1, r3, #28
 80030b2:	d502      	bpl.n	80030ba <_puts_r+0x2e>
 80030b4:	6923      	ldr	r3, [r4, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d135      	bne.n	8003126 <_puts_r+0x9a>
 80030ba:	4621      	mov	r1, r4
 80030bc:	4628      	mov	r0, r5
 80030be:	f000 f8c5 	bl	800324c <__swsetup_r>
 80030c2:	b380      	cbz	r0, 8003126 <_puts_r+0x9a>
 80030c4:	f04f 35ff 	mov.w	r5, #4294967295
 80030c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ca:	07da      	lsls	r2, r3, #31
 80030cc:	d405      	bmi.n	80030da <_puts_r+0x4e>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	059b      	lsls	r3, r3, #22
 80030d2:	d402      	bmi.n	80030da <_puts_r+0x4e>
 80030d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030d6:	f000 f989 	bl	80033ec <__retarget_lock_release_recursive>
 80030da:	4628      	mov	r0, r5
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da04      	bge.n	80030ec <_puts_r+0x60>
 80030e2:	69a2      	ldr	r2, [r4, #24]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dc17      	bgt.n	8003118 <_puts_r+0x8c>
 80030e8:	290a      	cmp	r1, #10
 80030ea:	d015      	beq.n	8003118 <_puts_r+0x8c>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	6022      	str	r2, [r4, #0]
 80030f2:	7019      	strb	r1, [r3, #0]
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	2900      	cmp	r1, #0
 8003100:	d1ed      	bne.n	80030de <_puts_r+0x52>
 8003102:	2b00      	cmp	r3, #0
 8003104:	da11      	bge.n	800312a <_puts_r+0x9e>
 8003106:	4622      	mov	r2, r4
 8003108:	210a      	movs	r1, #10
 800310a:	4628      	mov	r0, r5
 800310c:	f000 f85f 	bl	80031ce <__swbuf_r>
 8003110:	3001      	adds	r0, #1
 8003112:	d0d7      	beq.n	80030c4 <_puts_r+0x38>
 8003114:	250a      	movs	r5, #10
 8003116:	e7d7      	b.n	80030c8 <_puts_r+0x3c>
 8003118:	4622      	mov	r2, r4
 800311a:	4628      	mov	r0, r5
 800311c:	f000 f857 	bl	80031ce <__swbuf_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d1e7      	bne.n	80030f4 <_puts_r+0x68>
 8003124:	e7ce      	b.n	80030c4 <_puts_r+0x38>
 8003126:	3e01      	subs	r6, #1
 8003128:	e7e4      	b.n	80030f4 <_puts_r+0x68>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	6022      	str	r2, [r4, #0]
 8003130:	220a      	movs	r2, #10
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e7ee      	b.n	8003114 <_puts_r+0x88>
	...

08003138 <puts>:
 8003138:	4b02      	ldr	r3, [pc, #8]	@ (8003144 <puts+0xc>)
 800313a:	4601      	mov	r1, r0
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	f7ff bfa5 	b.w	800308c <_puts_r>
 8003142:	bf00      	nop
 8003144:	20000018 	.word	0x20000018

08003148 <__sread>:
 8003148:	b510      	push	{r4, lr}
 800314a:	460c      	mov	r4, r1
 800314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003150:	f000 f8fc 	bl	800334c <_read_r>
 8003154:	2800      	cmp	r0, #0
 8003156:	bfab      	itete	ge
 8003158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800315a:	89a3      	ldrhlt	r3, [r4, #12]
 800315c:	181b      	addge	r3, r3, r0
 800315e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003162:	bfac      	ite	ge
 8003164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003166:	81a3      	strhlt	r3, [r4, #12]
 8003168:	bd10      	pop	{r4, pc}

0800316a <__swrite>:
 800316a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316e:	461f      	mov	r7, r3
 8003170:	898b      	ldrh	r3, [r1, #12]
 8003172:	05db      	lsls	r3, r3, #23
 8003174:	4605      	mov	r5, r0
 8003176:	460c      	mov	r4, r1
 8003178:	4616      	mov	r6, r2
 800317a:	d505      	bpl.n	8003188 <__swrite+0x1e>
 800317c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003180:	2302      	movs	r3, #2
 8003182:	2200      	movs	r2, #0
 8003184:	f000 f8d0 	bl	8003328 <_lseek_r>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800318e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	4632      	mov	r2, r6
 8003196:	463b      	mov	r3, r7
 8003198:	4628      	mov	r0, r5
 800319a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800319e:	f000 b8e7 	b.w	8003370 <_write_r>

080031a2 <__sseek>:
 80031a2:	b510      	push	{r4, lr}
 80031a4:	460c      	mov	r4, r1
 80031a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031aa:	f000 f8bd 	bl	8003328 <_lseek_r>
 80031ae:	1c43      	adds	r3, r0, #1
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	bf15      	itete	ne
 80031b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031be:	81a3      	strheq	r3, [r4, #12]
 80031c0:	bf18      	it	ne
 80031c2:	81a3      	strhne	r3, [r4, #12]
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <__sclose>:
 80031c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ca:	f000 b89d 	b.w	8003308 <_close_r>

080031ce <__swbuf_r>:
 80031ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d0:	460e      	mov	r6, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	4605      	mov	r5, r0
 80031d6:	b118      	cbz	r0, 80031e0 <__swbuf_r+0x12>
 80031d8:	6a03      	ldr	r3, [r0, #32]
 80031da:	b90b      	cbnz	r3, 80031e0 <__swbuf_r+0x12>
 80031dc:	f7ff ff0e 	bl	8002ffc <__sinit>
 80031e0:	69a3      	ldr	r3, [r4, #24]
 80031e2:	60a3      	str	r3, [r4, #8]
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	071a      	lsls	r2, r3, #28
 80031e8:	d501      	bpl.n	80031ee <__swbuf_r+0x20>
 80031ea:	6923      	ldr	r3, [r4, #16]
 80031ec:	b943      	cbnz	r3, 8003200 <__swbuf_r+0x32>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f82b 	bl	800324c <__swsetup_r>
 80031f6:	b118      	cbz	r0, 8003200 <__swbuf_r+0x32>
 80031f8:	f04f 37ff 	mov.w	r7, #4294967295
 80031fc:	4638      	mov	r0, r7
 80031fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	6922      	ldr	r2, [r4, #16]
 8003204:	1a98      	subs	r0, r3, r2
 8003206:	6963      	ldr	r3, [r4, #20]
 8003208:	b2f6      	uxtb	r6, r6
 800320a:	4283      	cmp	r3, r0
 800320c:	4637      	mov	r7, r6
 800320e:	dc05      	bgt.n	800321c <__swbuf_r+0x4e>
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	f000 fd38 	bl	8003c88 <_fflush_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	d1ed      	bne.n	80031f8 <__swbuf_r+0x2a>
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	3b01      	subs	r3, #1
 8003220:	60a3      	str	r3, [r4, #8]
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	6022      	str	r2, [r4, #0]
 8003228:	701e      	strb	r6, [r3, #0]
 800322a:	6962      	ldr	r2, [r4, #20]
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	429a      	cmp	r2, r3
 8003230:	d004      	beq.n	800323c <__swbuf_r+0x6e>
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	07db      	lsls	r3, r3, #31
 8003236:	d5e1      	bpl.n	80031fc <__swbuf_r+0x2e>
 8003238:	2e0a      	cmp	r6, #10
 800323a:	d1df      	bne.n	80031fc <__swbuf_r+0x2e>
 800323c:	4621      	mov	r1, r4
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fd22 	bl	8003c88 <_fflush_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0d9      	beq.n	80031fc <__swbuf_r+0x2e>
 8003248:	e7d6      	b.n	80031f8 <__swbuf_r+0x2a>
	...

0800324c <__swsetup_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <__swsetup_r+0xa8>)
 8003250:	4605      	mov	r5, r0
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	460c      	mov	r4, r1
 8003256:	b118      	cbz	r0, 8003260 <__swsetup_r+0x14>
 8003258:	6a03      	ldr	r3, [r0, #32]
 800325a:	b90b      	cbnz	r3, 8003260 <__swsetup_r+0x14>
 800325c:	f7ff fece 	bl	8002ffc <__sinit>
 8003260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003264:	0719      	lsls	r1, r3, #28
 8003266:	d422      	bmi.n	80032ae <__swsetup_r+0x62>
 8003268:	06da      	lsls	r2, r3, #27
 800326a:	d407      	bmi.n	800327c <__swsetup_r+0x30>
 800326c:	2209      	movs	r2, #9
 800326e:	602a      	str	r2, [r5, #0]
 8003270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	f04f 30ff 	mov.w	r0, #4294967295
 800327a:	e033      	b.n	80032e4 <__swsetup_r+0x98>
 800327c:	0758      	lsls	r0, r3, #29
 800327e:	d512      	bpl.n	80032a6 <__swsetup_r+0x5a>
 8003280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003282:	b141      	cbz	r1, 8003296 <__swsetup_r+0x4a>
 8003284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003288:	4299      	cmp	r1, r3
 800328a:	d002      	beq.n	8003292 <__swsetup_r+0x46>
 800328c:	4628      	mov	r0, r5
 800328e:	f000 f8af 	bl	80033f0 <_free_r>
 8003292:	2300      	movs	r3, #0
 8003294:	6363      	str	r3, [r4, #52]	@ 0x34
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	2300      	movs	r3, #0
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	6923      	ldr	r3, [r4, #16]
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f043 0308 	orr.w	r3, r3, #8
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	b94b      	cbnz	r3, 80032c6 <__swsetup_r+0x7a>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032bc:	d003      	beq.n	80032c6 <__swsetup_r+0x7a>
 80032be:	4621      	mov	r1, r4
 80032c0:	4628      	mov	r0, r5
 80032c2:	f000 fd2f 	bl	8003d24 <__smakebuf_r>
 80032c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ca:	f013 0201 	ands.w	r2, r3, #1
 80032ce:	d00a      	beq.n	80032e6 <__swsetup_r+0x9a>
 80032d0:	2200      	movs	r2, #0
 80032d2:	60a2      	str	r2, [r4, #8]
 80032d4:	6962      	ldr	r2, [r4, #20]
 80032d6:	4252      	negs	r2, r2
 80032d8:	61a2      	str	r2, [r4, #24]
 80032da:	6922      	ldr	r2, [r4, #16]
 80032dc:	b942      	cbnz	r2, 80032f0 <__swsetup_r+0xa4>
 80032de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032e2:	d1c5      	bne.n	8003270 <__swsetup_r+0x24>
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
 80032e6:	0799      	lsls	r1, r3, #30
 80032e8:	bf58      	it	pl
 80032ea:	6962      	ldrpl	r2, [r4, #20]
 80032ec:	60a2      	str	r2, [r4, #8]
 80032ee:	e7f4      	b.n	80032da <__swsetup_r+0x8e>
 80032f0:	2000      	movs	r0, #0
 80032f2:	e7f7      	b.n	80032e4 <__swsetup_r+0x98>
 80032f4:	20000018 	.word	0x20000018

080032f8 <memset>:
 80032f8:	4402      	add	r2, r0
 80032fa:	4603      	mov	r3, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	f803 1b01 	strb.w	r1, [r3], #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <_close_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4d06      	ldr	r5, [pc, #24]	@ (8003324 <_close_r+0x1c>)
 800330c:	2300      	movs	r3, #0
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	f7fe f8d3 	bl	80014be <_close>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_close_r+0x1a>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_close_r+0x1a>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000b74 	.word	0x20000b74

08003328 <_lseek_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4d07      	ldr	r5, [pc, #28]	@ (8003348 <_lseek_r+0x20>)
 800332c:	4604      	mov	r4, r0
 800332e:	4608      	mov	r0, r1
 8003330:	4611      	mov	r1, r2
 8003332:	2200      	movs	r2, #0
 8003334:	602a      	str	r2, [r5, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7fe f8e8 	bl	800150c <_lseek>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_lseek_r+0x1e>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	b103      	cbz	r3, 8003346 <_lseek_r+0x1e>
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	20000b74 	.word	0x20000b74

0800334c <_read_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4d07      	ldr	r5, [pc, #28]	@ (800336c <_read_r+0x20>)
 8003350:	4604      	mov	r4, r0
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	2200      	movs	r2, #0
 8003358:	602a      	str	r2, [r5, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f7fe f876 	bl	800144c <_read>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_read_r+0x1e>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_read_r+0x1e>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	20000b74 	.word	0x20000b74

08003370 <_write_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d07      	ldr	r5, [pc, #28]	@ (8003390 <_write_r+0x20>)
 8003374:	4604      	mov	r4, r0
 8003376:	4608      	mov	r0, r1
 8003378:	4611      	mov	r1, r2
 800337a:	2200      	movs	r2, #0
 800337c:	602a      	str	r2, [r5, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fe f881 	bl	8001486 <_write>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_write_r+0x1e>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_write_r+0x1e>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000b74 	.word	0x20000b74

08003394 <__errno>:
 8003394:	4b01      	ldr	r3, [pc, #4]	@ (800339c <__errno+0x8>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000018 	.word	0x20000018

080033a0 <__libc_init_array>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	4d0d      	ldr	r5, [pc, #52]	@ (80033d8 <__libc_init_array+0x38>)
 80033a4:	4c0d      	ldr	r4, [pc, #52]	@ (80033dc <__libc_init_array+0x3c>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	2600      	movs	r6, #0
 80033ac:	42a6      	cmp	r6, r4
 80033ae:	d109      	bne.n	80033c4 <__libc_init_array+0x24>
 80033b0:	4d0b      	ldr	r5, [pc, #44]	@ (80033e0 <__libc_init_array+0x40>)
 80033b2:	4c0c      	ldr	r4, [pc, #48]	@ (80033e4 <__libc_init_array+0x44>)
 80033b4:	f000 fd24 	bl	8003e00 <_init>
 80033b8:	1b64      	subs	r4, r4, r5
 80033ba:	10a4      	asrs	r4, r4, #2
 80033bc:	2600      	movs	r6, #0
 80033be:	42a6      	cmp	r6, r4
 80033c0:	d105      	bne.n	80033ce <__libc_init_array+0x2e>
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c8:	4798      	blx	r3
 80033ca:	3601      	adds	r6, #1
 80033cc:	e7ee      	b.n	80033ac <__libc_init_array+0xc>
 80033ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d2:	4798      	blx	r3
 80033d4:	3601      	adds	r6, #1
 80033d6:	e7f2      	b.n	80033be <__libc_init_array+0x1e>
 80033d8:	08003f68 	.word	0x08003f68
 80033dc:	08003f68 	.word	0x08003f68
 80033e0:	08003f68 	.word	0x08003f68
 80033e4:	08003f6c 	.word	0x08003f6c

080033e8 <__retarget_lock_init_recursive>:
 80033e8:	4770      	bx	lr

080033ea <__retarget_lock_acquire_recursive>:
 80033ea:	4770      	bx	lr

080033ec <__retarget_lock_release_recursive>:
 80033ec:	4770      	bx	lr
	...

080033f0 <_free_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4605      	mov	r5, r0
 80033f4:	2900      	cmp	r1, #0
 80033f6:	d041      	beq.n	800347c <_free_r+0x8c>
 80033f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033fc:	1f0c      	subs	r4, r1, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bfb8      	it	lt
 8003402:	18e4      	addlt	r4, r4, r3
 8003404:	f000 f8e0 	bl	80035c8 <__malloc_lock>
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <_free_r+0x90>)
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	b933      	cbnz	r3, 800341c <_free_r+0x2c>
 800340e:	6063      	str	r3, [r4, #4]
 8003410:	6014      	str	r4, [r2, #0]
 8003412:	4628      	mov	r0, r5
 8003414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003418:	f000 b8dc 	b.w	80035d4 <__malloc_unlock>
 800341c:	42a3      	cmp	r3, r4
 800341e:	d908      	bls.n	8003432 <_free_r+0x42>
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	1821      	adds	r1, r4, r0
 8003424:	428b      	cmp	r3, r1
 8003426:	bf01      	itttt	eq
 8003428:	6819      	ldreq	r1, [r3, #0]
 800342a:	685b      	ldreq	r3, [r3, #4]
 800342c:	1809      	addeq	r1, r1, r0
 800342e:	6021      	streq	r1, [r4, #0]
 8003430:	e7ed      	b.n	800340e <_free_r+0x1e>
 8003432:	461a      	mov	r2, r3
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b10b      	cbz	r3, 800343c <_free_r+0x4c>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d9fa      	bls.n	8003432 <_free_r+0x42>
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	1850      	adds	r0, r2, r1
 8003440:	42a0      	cmp	r0, r4
 8003442:	d10b      	bne.n	800345c <_free_r+0x6c>
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	4401      	add	r1, r0
 8003448:	1850      	adds	r0, r2, r1
 800344a:	4283      	cmp	r3, r0
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	d1e0      	bne.n	8003412 <_free_r+0x22>
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	4408      	add	r0, r1
 8003458:	6010      	str	r0, [r2, #0]
 800345a:	e7da      	b.n	8003412 <_free_r+0x22>
 800345c:	d902      	bls.n	8003464 <_free_r+0x74>
 800345e:	230c      	movs	r3, #12
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	e7d6      	b.n	8003412 <_free_r+0x22>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf04      	itt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	bf04      	itt	eq
 8003474:	1809      	addeq	r1, r1, r0
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6054      	str	r4, [r2, #4]
 800347a:	e7ca      	b.n	8003412 <_free_r+0x22>
 800347c:	bd38      	pop	{r3, r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	20000b80 	.word	0x20000b80

08003484 <sbrk_aligned>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0f      	ldr	r6, [pc, #60]	@ (80034c4 <sbrk_aligned+0x40>)
 8003488:	460c      	mov	r4, r1
 800348a:	6831      	ldr	r1, [r6, #0]
 800348c:	4605      	mov	r5, r0
 800348e:	b911      	cbnz	r1, 8003496 <sbrk_aligned+0x12>
 8003490:	f000 fca6 	bl	8003de0 <_sbrk_r>
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 fca1 	bl	8003de0 <_sbrk_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d103      	bne.n	80034aa <sbrk_aligned+0x26>
 80034a2:	f04f 34ff 	mov.w	r4, #4294967295
 80034a6:	4620      	mov	r0, r4
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0f8      	beq.n	80034a6 <sbrk_aligned+0x22>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 fc92 	bl	8003de0 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1f2      	bne.n	80034a6 <sbrk_aligned+0x22>
 80034c0:	e7ef      	b.n	80034a2 <sbrk_aligned+0x1e>
 80034c2:	bf00      	nop
 80034c4:	20000b7c 	.word	0x20000b7c

080034c8 <_malloc_r>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	1ccd      	adds	r5, r1, #3
 80034ce:	f025 0503 	bic.w	r5, r5, #3
 80034d2:	3508      	adds	r5, #8
 80034d4:	2d0c      	cmp	r5, #12
 80034d6:	bf38      	it	cc
 80034d8:	250c      	movcc	r5, #12
 80034da:	2d00      	cmp	r5, #0
 80034dc:	4606      	mov	r6, r0
 80034de:	db01      	blt.n	80034e4 <_malloc_r+0x1c>
 80034e0:	42a9      	cmp	r1, r5
 80034e2:	d904      	bls.n	80034ee <_malloc_r+0x26>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	2000      	movs	r0, #0
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c4 <_malloc_r+0xfc>
 80034f2:	f000 f869 	bl	80035c8 <__malloc_lock>
 80034f6:	f8d8 3000 	ldr.w	r3, [r8]
 80034fa:	461c      	mov	r4, r3
 80034fc:	bb44      	cbnz	r4, 8003550 <_malloc_r+0x88>
 80034fe:	4629      	mov	r1, r5
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ffbf 	bl	8003484 <sbrk_aligned>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	4604      	mov	r4, r0
 800350a:	d158      	bne.n	80035be <_malloc_r+0xf6>
 800350c:	f8d8 4000 	ldr.w	r4, [r8]
 8003510:	4627      	mov	r7, r4
 8003512:	2f00      	cmp	r7, #0
 8003514:	d143      	bne.n	800359e <_malloc_r+0xd6>
 8003516:	2c00      	cmp	r4, #0
 8003518:	d04b      	beq.n	80035b2 <_malloc_r+0xea>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4639      	mov	r1, r7
 800351e:	4630      	mov	r0, r6
 8003520:	eb04 0903 	add.w	r9, r4, r3
 8003524:	f000 fc5c 	bl	8003de0 <_sbrk_r>
 8003528:	4581      	cmp	r9, r0
 800352a:	d142      	bne.n	80035b2 <_malloc_r+0xea>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	1a6d      	subs	r5, r5, r1
 8003530:	4629      	mov	r1, r5
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff ffa6 	bl	8003484 <sbrk_aligned>
 8003538:	3001      	adds	r0, #1
 800353a:	d03a      	beq.n	80035b2 <_malloc_r+0xea>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	442b      	add	r3, r5
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	bb62      	cbnz	r2, 80035a4 <_malloc_r+0xdc>
 800354a:	f8c8 7000 	str.w	r7, [r8]
 800354e:	e00f      	b.n	8003570 <_malloc_r+0xa8>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	1b52      	subs	r2, r2, r5
 8003554:	d420      	bmi.n	8003598 <_malloc_r+0xd0>
 8003556:	2a0b      	cmp	r2, #11
 8003558:	d917      	bls.n	800358a <_malloc_r+0xc2>
 800355a:	1961      	adds	r1, r4, r5
 800355c:	42a3      	cmp	r3, r4
 800355e:	6025      	str	r5, [r4, #0]
 8003560:	bf18      	it	ne
 8003562:	6059      	strne	r1, [r3, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	bf08      	it	eq
 8003568:	f8c8 1000 	streq.w	r1, [r8]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f82f 	bl	80035d4 <__malloc_unlock>
 8003576:	f104 000b 	add.w	r0, r4, #11
 800357a:	1d23      	adds	r3, r4, #4
 800357c:	f020 0007 	bic.w	r0, r0, #7
 8003580:	1ac2      	subs	r2, r0, r3
 8003582:	bf1c      	itt	ne
 8003584:	1a1b      	subne	r3, r3, r0
 8003586:	50a3      	strne	r3, [r4, r2]
 8003588:	e7af      	b.n	80034ea <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	f8c8 2000 	streq.w	r2, [r8]
 8003594:	605a      	strne	r2, [r3, #4]
 8003596:	e7eb      	b.n	8003570 <_malloc_r+0xa8>
 8003598:	4623      	mov	r3, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7ae      	b.n	80034fc <_malloc_r+0x34>
 800359e:	463c      	mov	r4, r7
 80035a0:	687f      	ldr	r7, [r7, #4]
 80035a2:	e7b6      	b.n	8003512 <_malloc_r+0x4a>
 80035a4:	461a      	mov	r2, r3
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d1fb      	bne.n	80035a4 <_malloc_r+0xdc>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa8>
 80035b2:	230c      	movs	r3, #12
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 f80c 	bl	80035d4 <__malloc_unlock>
 80035bc:	e794      	b.n	80034e8 <_malloc_r+0x20>
 80035be:	6005      	str	r5, [r0, #0]
 80035c0:	e7d6      	b.n	8003570 <_malloc_r+0xa8>
 80035c2:	bf00      	nop
 80035c4:	20000b80 	.word	0x20000b80

080035c8 <__malloc_lock>:
 80035c8:	4801      	ldr	r0, [pc, #4]	@ (80035d0 <__malloc_lock+0x8>)
 80035ca:	f7ff bf0e 	b.w	80033ea <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	20000b78 	.word	0x20000b78

080035d4 <__malloc_unlock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_unlock+0x8>)
 80035d6:	f7ff bf09 	b.w	80033ec <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	20000b78 	.word	0x20000b78

080035e0 <__sfputc_r>:
 80035e0:	6893      	ldr	r3, [r2, #8]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	b410      	push	{r4}
 80035e8:	6093      	str	r3, [r2, #8]
 80035ea:	da08      	bge.n	80035fe <__sfputc_r+0x1e>
 80035ec:	6994      	ldr	r4, [r2, #24]
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	db01      	blt.n	80035f6 <__sfputc_r+0x16>
 80035f2:	290a      	cmp	r1, #10
 80035f4:	d103      	bne.n	80035fe <__sfputc_r+0x1e>
 80035f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035fa:	f7ff bde8 	b.w	80031ce <__swbuf_r>
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	1c58      	adds	r0, r3, #1
 8003602:	6010      	str	r0, [r2, #0]
 8003604:	7019      	strb	r1, [r3, #0]
 8003606:	4608      	mov	r0, r1
 8003608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800360c:	4770      	bx	lr

0800360e <__sfputs_r>:
 800360e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003610:	4606      	mov	r6, r0
 8003612:	460f      	mov	r7, r1
 8003614:	4614      	mov	r4, r2
 8003616:	18d5      	adds	r5, r2, r3
 8003618:	42ac      	cmp	r4, r5
 800361a:	d101      	bne.n	8003620 <__sfputs_r+0x12>
 800361c:	2000      	movs	r0, #0
 800361e:	e007      	b.n	8003630 <__sfputs_r+0x22>
 8003620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003624:	463a      	mov	r2, r7
 8003626:	4630      	mov	r0, r6
 8003628:	f7ff ffda 	bl	80035e0 <__sfputc_r>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d1f3      	bne.n	8003618 <__sfputs_r+0xa>
 8003630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003634 <_vfiprintf_r>:
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	460d      	mov	r5, r1
 800363a:	b09d      	sub	sp, #116	@ 0x74
 800363c:	4614      	mov	r4, r2
 800363e:	4698      	mov	r8, r3
 8003640:	4606      	mov	r6, r0
 8003642:	b118      	cbz	r0, 800364c <_vfiprintf_r+0x18>
 8003644:	6a03      	ldr	r3, [r0, #32]
 8003646:	b90b      	cbnz	r3, 800364c <_vfiprintf_r+0x18>
 8003648:	f7ff fcd8 	bl	8002ffc <__sinit>
 800364c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	d405      	bmi.n	800365e <_vfiprintf_r+0x2a>
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	059a      	lsls	r2, r3, #22
 8003656:	d402      	bmi.n	800365e <_vfiprintf_r+0x2a>
 8003658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800365a:	f7ff fec6 	bl	80033ea <__retarget_lock_acquire_recursive>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	d501      	bpl.n	8003668 <_vfiprintf_r+0x34>
 8003664:	692b      	ldr	r3, [r5, #16]
 8003666:	b99b      	cbnz	r3, 8003690 <_vfiprintf_r+0x5c>
 8003668:	4629      	mov	r1, r5
 800366a:	4630      	mov	r0, r6
 800366c:	f7ff fdee 	bl	800324c <__swsetup_r>
 8003670:	b170      	cbz	r0, 8003690 <_vfiprintf_r+0x5c>
 8003672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003674:	07dc      	lsls	r4, r3, #31
 8003676:	d504      	bpl.n	8003682 <_vfiprintf_r+0x4e>
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	b01d      	add	sp, #116	@ 0x74
 800367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	0598      	lsls	r0, r3, #22
 8003686:	d4f7      	bmi.n	8003678 <_vfiprintf_r+0x44>
 8003688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800368a:	f7ff feaf 	bl	80033ec <__retarget_lock_release_recursive>
 800368e:	e7f3      	b.n	8003678 <_vfiprintf_r+0x44>
 8003690:	2300      	movs	r3, #0
 8003692:	9309      	str	r3, [sp, #36]	@ 0x24
 8003694:	2320      	movs	r3, #32
 8003696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800369a:	f8cd 800c 	str.w	r8, [sp, #12]
 800369e:	2330      	movs	r3, #48	@ 0x30
 80036a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003850 <_vfiprintf_r+0x21c>
 80036a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036a8:	f04f 0901 	mov.w	r9, #1
 80036ac:	4623      	mov	r3, r4
 80036ae:	469a      	mov	sl, r3
 80036b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b4:	b10a      	cbz	r2, 80036ba <_vfiprintf_r+0x86>
 80036b6:	2a25      	cmp	r2, #37	@ 0x25
 80036b8:	d1f9      	bne.n	80036ae <_vfiprintf_r+0x7a>
 80036ba:	ebba 0b04 	subs.w	fp, sl, r4
 80036be:	d00b      	beq.n	80036d8 <_vfiprintf_r+0xa4>
 80036c0:	465b      	mov	r3, fp
 80036c2:	4622      	mov	r2, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff ffa1 	bl	800360e <__sfputs_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	f000 80a7 	beq.w	8003820 <_vfiprintf_r+0x1ec>
 80036d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036d4:	445a      	add	r2, fp
 80036d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80036d8:	f89a 3000 	ldrb.w	r3, [sl]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 809f 	beq.w	8003820 <_vfiprintf_r+0x1ec>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ec:	f10a 0a01 	add.w	sl, sl, #1
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	9307      	str	r3, [sp, #28]
 80036f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80036fa:	4654      	mov	r4, sl
 80036fc:	2205      	movs	r2, #5
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	4853      	ldr	r0, [pc, #332]	@ (8003850 <_vfiprintf_r+0x21c>)
 8003704:	f7fc fd84 	bl	8000210 <memchr>
 8003708:	9a04      	ldr	r2, [sp, #16]
 800370a:	b9d8      	cbnz	r0, 8003744 <_vfiprintf_r+0x110>
 800370c:	06d1      	lsls	r1, r2, #27
 800370e:	bf44      	itt	mi
 8003710:	2320      	movmi	r3, #32
 8003712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003716:	0713      	lsls	r3, r2, #28
 8003718:	bf44      	itt	mi
 800371a:	232b      	movmi	r3, #43	@ 0x2b
 800371c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003720:	f89a 3000 	ldrb.w	r3, [sl]
 8003724:	2b2a      	cmp	r3, #42	@ 0x2a
 8003726:	d015      	beq.n	8003754 <_vfiprintf_r+0x120>
 8003728:	9a07      	ldr	r2, [sp, #28]
 800372a:	4654      	mov	r4, sl
 800372c:	2000      	movs	r0, #0
 800372e:	f04f 0c0a 	mov.w	ip, #10
 8003732:	4621      	mov	r1, r4
 8003734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003738:	3b30      	subs	r3, #48	@ 0x30
 800373a:	2b09      	cmp	r3, #9
 800373c:	d94b      	bls.n	80037d6 <_vfiprintf_r+0x1a2>
 800373e:	b1b0      	cbz	r0, 800376e <_vfiprintf_r+0x13a>
 8003740:	9207      	str	r2, [sp, #28]
 8003742:	e014      	b.n	800376e <_vfiprintf_r+0x13a>
 8003744:	eba0 0308 	sub.w	r3, r0, r8
 8003748:	fa09 f303 	lsl.w	r3, r9, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	46a2      	mov	sl, r4
 8003752:	e7d2      	b.n	80036fa <_vfiprintf_r+0xc6>
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	1d19      	adds	r1, r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9103      	str	r1, [sp, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	bfbb      	ittet	lt
 8003760:	425b      	neglt	r3, r3
 8003762:	f042 0202 	orrlt.w	r2, r2, #2
 8003766:	9307      	strge	r3, [sp, #28]
 8003768:	9307      	strlt	r3, [sp, #28]
 800376a:	bfb8      	it	lt
 800376c:	9204      	strlt	r2, [sp, #16]
 800376e:	7823      	ldrb	r3, [r4, #0]
 8003770:	2b2e      	cmp	r3, #46	@ 0x2e
 8003772:	d10a      	bne.n	800378a <_vfiprintf_r+0x156>
 8003774:	7863      	ldrb	r3, [r4, #1]
 8003776:	2b2a      	cmp	r3, #42	@ 0x2a
 8003778:	d132      	bne.n	80037e0 <_vfiprintf_r+0x1ac>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	9203      	str	r2, [sp, #12]
 8003782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003786:	3402      	adds	r4, #2
 8003788:	9305      	str	r3, [sp, #20]
 800378a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003860 <_vfiprintf_r+0x22c>
 800378e:	7821      	ldrb	r1, [r4, #0]
 8003790:	2203      	movs	r2, #3
 8003792:	4650      	mov	r0, sl
 8003794:	f7fc fd3c 	bl	8000210 <memchr>
 8003798:	b138      	cbz	r0, 80037aa <_vfiprintf_r+0x176>
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	eba0 000a 	sub.w	r0, r0, sl
 80037a0:	2240      	movs	r2, #64	@ 0x40
 80037a2:	4082      	lsls	r2, r0
 80037a4:	4313      	orrs	r3, r2
 80037a6:	3401      	adds	r4, #1
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ae:	4829      	ldr	r0, [pc, #164]	@ (8003854 <_vfiprintf_r+0x220>)
 80037b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037b4:	2206      	movs	r2, #6
 80037b6:	f7fc fd2b 	bl	8000210 <memchr>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d03f      	beq.n	800383e <_vfiprintf_r+0x20a>
 80037be:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <_vfiprintf_r+0x224>)
 80037c0:	bb1b      	cbnz	r3, 800380a <_vfiprintf_r+0x1d6>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3307      	adds	r3, #7
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	3308      	adds	r3, #8
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037d0:	443b      	add	r3, r7
 80037d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d4:	e76a      	b.n	80036ac <_vfiprintf_r+0x78>
 80037d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037da:	460c      	mov	r4, r1
 80037dc:	2001      	movs	r0, #1
 80037de:	e7a8      	b.n	8003732 <_vfiprintf_r+0xfe>
 80037e0:	2300      	movs	r3, #0
 80037e2:	3401      	adds	r4, #1
 80037e4:	9305      	str	r3, [sp, #20]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	4620      	mov	r0, r4
 80037ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f2:	3a30      	subs	r2, #48	@ 0x30
 80037f4:	2a09      	cmp	r2, #9
 80037f6:	d903      	bls.n	8003800 <_vfiprintf_r+0x1cc>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0c6      	beq.n	800378a <_vfiprintf_r+0x156>
 80037fc:	9105      	str	r1, [sp, #20]
 80037fe:	e7c4      	b.n	800378a <_vfiprintf_r+0x156>
 8003800:	fb0c 2101 	mla	r1, ip, r1, r2
 8003804:	4604      	mov	r4, r0
 8003806:	2301      	movs	r3, #1
 8003808:	e7f0      	b.n	80037ec <_vfiprintf_r+0x1b8>
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <_vfiprintf_r+0x228>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	4630      	mov	r0, r6
 8003816:	f3af 8000 	nop.w
 800381a:	4607      	mov	r7, r0
 800381c:	1c78      	adds	r0, r7, #1
 800381e:	d1d6      	bne.n	80037ce <_vfiprintf_r+0x19a>
 8003820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003822:	07d9      	lsls	r1, r3, #31
 8003824:	d405      	bmi.n	8003832 <_vfiprintf_r+0x1fe>
 8003826:	89ab      	ldrh	r3, [r5, #12]
 8003828:	059a      	lsls	r2, r3, #22
 800382a:	d402      	bmi.n	8003832 <_vfiprintf_r+0x1fe>
 800382c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800382e:	f7ff fddd 	bl	80033ec <__retarget_lock_release_recursive>
 8003832:	89ab      	ldrh	r3, [r5, #12]
 8003834:	065b      	lsls	r3, r3, #25
 8003836:	f53f af1f 	bmi.w	8003678 <_vfiprintf_r+0x44>
 800383a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800383c:	e71e      	b.n	800367c <_vfiprintf_r+0x48>
 800383e:	ab03      	add	r3, sp, #12
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	462a      	mov	r2, r5
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <_vfiprintf_r+0x228>)
 8003846:	a904      	add	r1, sp, #16
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f879 	bl	8003940 <_printf_i>
 800384e:	e7e4      	b.n	800381a <_vfiprintf_r+0x1e6>
 8003850:	08003f2c 	.word	0x08003f2c
 8003854:	08003f36 	.word	0x08003f36
 8003858:	00000000 	.word	0x00000000
 800385c:	0800360f 	.word	0x0800360f
 8003860:	08003f32 	.word	0x08003f32

08003864 <_printf_common>:
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	4616      	mov	r6, r2
 800386a:	4698      	mov	r8, r3
 800386c:	688a      	ldr	r2, [r1, #8]
 800386e:	690b      	ldr	r3, [r1, #16]
 8003870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003874:	4293      	cmp	r3, r2
 8003876:	bfb8      	it	lt
 8003878:	4613      	movlt	r3, r2
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003880:	4607      	mov	r7, r0
 8003882:	460c      	mov	r4, r1
 8003884:	b10a      	cbz	r2, 800388a <_printf_common+0x26>
 8003886:	3301      	adds	r3, #1
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	0699      	lsls	r1, r3, #26
 800388e:	bf42      	ittt	mi
 8003890:	6833      	ldrmi	r3, [r6, #0]
 8003892:	3302      	addmi	r3, #2
 8003894:	6033      	strmi	r3, [r6, #0]
 8003896:	6825      	ldr	r5, [r4, #0]
 8003898:	f015 0506 	ands.w	r5, r5, #6
 800389c:	d106      	bne.n	80038ac <_printf_common+0x48>
 800389e:	f104 0a19 	add.w	sl, r4, #25
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	6832      	ldr	r2, [r6, #0]
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	42ab      	cmp	r3, r5
 80038aa:	dc26      	bgt.n	80038fa <_printf_common+0x96>
 80038ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	3b00      	subs	r3, #0
 80038b4:	bf18      	it	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	0692      	lsls	r2, r2, #26
 80038ba:	d42b      	bmi.n	8003914 <_printf_common+0xb0>
 80038bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038c0:	4641      	mov	r1, r8
 80038c2:	4638      	mov	r0, r7
 80038c4:	47c8      	blx	r9
 80038c6:	3001      	adds	r0, #1
 80038c8:	d01e      	beq.n	8003908 <_printf_common+0xa4>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	f003 0306 	and.w	r3, r3, #6
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf02      	ittt	eq
 80038d6:	68e5      	ldreq	r5, [r4, #12]
 80038d8:	6833      	ldreq	r3, [r6, #0]
 80038da:	1aed      	subeq	r5, r5, r3
 80038dc:	68a3      	ldr	r3, [r4, #8]
 80038de:	bf0c      	ite	eq
 80038e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e4:	2500      	movne	r5, #0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	bfc4      	itt	gt
 80038ea:	1a9b      	subgt	r3, r3, r2
 80038ec:	18ed      	addgt	r5, r5, r3
 80038ee:	2600      	movs	r6, #0
 80038f0:	341a      	adds	r4, #26
 80038f2:	42b5      	cmp	r5, r6
 80038f4:	d11a      	bne.n	800392c <_printf_common+0xc8>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e008      	b.n	800390c <_printf_common+0xa8>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4652      	mov	r2, sl
 80038fe:	4641      	mov	r1, r8
 8003900:	4638      	mov	r0, r7
 8003902:	47c8      	blx	r9
 8003904:	3001      	adds	r0, #1
 8003906:	d103      	bne.n	8003910 <_printf_common+0xac>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003910:	3501      	adds	r5, #1
 8003912:	e7c6      	b.n	80038a2 <_printf_common+0x3e>
 8003914:	18e1      	adds	r1, r4, r3
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	2030      	movs	r0, #48	@ 0x30
 800391a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800391e:	4422      	add	r2, r4
 8003920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003928:	3302      	adds	r3, #2
 800392a:	e7c7      	b.n	80038bc <_printf_common+0x58>
 800392c:	2301      	movs	r3, #1
 800392e:	4622      	mov	r2, r4
 8003930:	4641      	mov	r1, r8
 8003932:	4638      	mov	r0, r7
 8003934:	47c8      	blx	r9
 8003936:	3001      	adds	r0, #1
 8003938:	d0e6      	beq.n	8003908 <_printf_common+0xa4>
 800393a:	3601      	adds	r6, #1
 800393c:	e7d9      	b.n	80038f2 <_printf_common+0x8e>
	...

08003940 <_printf_i>:
 8003940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	7e0f      	ldrb	r7, [r1, #24]
 8003946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003948:	2f78      	cmp	r7, #120	@ 0x78
 800394a:	4691      	mov	r9, r2
 800394c:	4680      	mov	r8, r0
 800394e:	460c      	mov	r4, r1
 8003950:	469a      	mov	sl, r3
 8003952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003956:	d807      	bhi.n	8003968 <_printf_i+0x28>
 8003958:	2f62      	cmp	r7, #98	@ 0x62
 800395a:	d80a      	bhi.n	8003972 <_printf_i+0x32>
 800395c:	2f00      	cmp	r7, #0
 800395e:	f000 80d2 	beq.w	8003b06 <_printf_i+0x1c6>
 8003962:	2f58      	cmp	r7, #88	@ 0x58
 8003964:	f000 80b9 	beq.w	8003ada <_printf_i+0x19a>
 8003968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800396c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003970:	e03a      	b.n	80039e8 <_printf_i+0xa8>
 8003972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003976:	2b15      	cmp	r3, #21
 8003978:	d8f6      	bhi.n	8003968 <_printf_i+0x28>
 800397a:	a101      	add	r1, pc, #4	@ (adr r1, 8003980 <_printf_i+0x40>)
 800397c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039ed 	.word	0x080039ed
 8003988:	08003969 	.word	0x08003969
 800398c:	08003969 	.word	0x08003969
 8003990:	08003969 	.word	0x08003969
 8003994:	08003969 	.word	0x08003969
 8003998:	080039ed 	.word	0x080039ed
 800399c:	08003969 	.word	0x08003969
 80039a0:	08003969 	.word	0x08003969
 80039a4:	08003969 	.word	0x08003969
 80039a8:	08003969 	.word	0x08003969
 80039ac:	08003aed 	.word	0x08003aed
 80039b0:	08003a17 	.word	0x08003a17
 80039b4:	08003aa7 	.word	0x08003aa7
 80039b8:	08003969 	.word	0x08003969
 80039bc:	08003969 	.word	0x08003969
 80039c0:	08003b0f 	.word	0x08003b0f
 80039c4:	08003969 	.word	0x08003969
 80039c8:	08003a17 	.word	0x08003a17
 80039cc:	08003969 	.word	0x08003969
 80039d0:	08003969 	.word	0x08003969
 80039d4:	08003aaf 	.word	0x08003aaf
 80039d8:	6833      	ldr	r3, [r6, #0]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6032      	str	r2, [r6, #0]
 80039e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039e8:	2301      	movs	r3, #1
 80039ea:	e09d      	b.n	8003b28 <_printf_i+0x1e8>
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	1d19      	adds	r1, r3, #4
 80039f2:	6031      	str	r1, [r6, #0]
 80039f4:	0606      	lsls	r6, r0, #24
 80039f6:	d501      	bpl.n	80039fc <_printf_i+0xbc>
 80039f8:	681d      	ldr	r5, [r3, #0]
 80039fa:	e003      	b.n	8003a04 <_printf_i+0xc4>
 80039fc:	0645      	lsls	r5, r0, #25
 80039fe:	d5fb      	bpl.n	80039f8 <_printf_i+0xb8>
 8003a00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	da03      	bge.n	8003a10 <_printf_i+0xd0>
 8003a08:	232d      	movs	r3, #45	@ 0x2d
 8003a0a:	426d      	negs	r5, r5
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a10:	4859      	ldr	r0, [pc, #356]	@ (8003b78 <_printf_i+0x238>)
 8003a12:	230a      	movs	r3, #10
 8003a14:	e011      	b.n	8003a3a <_printf_i+0xfa>
 8003a16:	6821      	ldr	r1, [r4, #0]
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	0608      	lsls	r0, r1, #24
 8003a1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a20:	d402      	bmi.n	8003a28 <_printf_i+0xe8>
 8003a22:	0649      	lsls	r1, r1, #25
 8003a24:	bf48      	it	mi
 8003a26:	b2ad      	uxthmi	r5, r5
 8003a28:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a2a:	4853      	ldr	r0, [pc, #332]	@ (8003b78 <_printf_i+0x238>)
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	bf14      	ite	ne
 8003a30:	230a      	movne	r3, #10
 8003a32:	2308      	moveq	r3, #8
 8003a34:	2100      	movs	r1, #0
 8003a36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a3a:	6866      	ldr	r6, [r4, #4]
 8003a3c:	60a6      	str	r6, [r4, #8]
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	bfa2      	ittt	ge
 8003a42:	6821      	ldrge	r1, [r4, #0]
 8003a44:	f021 0104 	bicge.w	r1, r1, #4
 8003a48:	6021      	strge	r1, [r4, #0]
 8003a4a:	b90d      	cbnz	r5, 8003a50 <_printf_i+0x110>
 8003a4c:	2e00      	cmp	r6, #0
 8003a4e:	d04b      	beq.n	8003ae8 <_printf_i+0x1a8>
 8003a50:	4616      	mov	r6, r2
 8003a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a56:	fb03 5711 	mls	r7, r3, r1, r5
 8003a5a:	5dc7      	ldrb	r7, [r0, r7]
 8003a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a60:	462f      	mov	r7, r5
 8003a62:	42bb      	cmp	r3, r7
 8003a64:	460d      	mov	r5, r1
 8003a66:	d9f4      	bls.n	8003a52 <_printf_i+0x112>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d10b      	bne.n	8003a84 <_printf_i+0x144>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	07df      	lsls	r7, r3, #31
 8003a70:	d508      	bpl.n	8003a84 <_printf_i+0x144>
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	6861      	ldr	r1, [r4, #4]
 8003a76:	4299      	cmp	r1, r3
 8003a78:	bfde      	ittt	le
 8003a7a:	2330      	movle	r3, #48	@ 0x30
 8003a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a84:	1b92      	subs	r2, r2, r6
 8003a86:	6122      	str	r2, [r4, #16]
 8003a88:	f8cd a000 	str.w	sl, [sp]
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	aa03      	add	r2, sp, #12
 8003a90:	4621      	mov	r1, r4
 8003a92:	4640      	mov	r0, r8
 8003a94:	f7ff fee6 	bl	8003864 <_printf_common>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d14a      	bne.n	8003b32 <_printf_i+0x1f2>
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	b004      	add	sp, #16
 8003aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	4833      	ldr	r0, [pc, #204]	@ (8003b7c <_printf_i+0x23c>)
 8003ab0:	2778      	movs	r7, #120	@ 0x78
 8003ab2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	6831      	ldr	r1, [r6, #0]
 8003aba:	061f      	lsls	r7, r3, #24
 8003abc:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ac0:	d402      	bmi.n	8003ac8 <_printf_i+0x188>
 8003ac2:	065f      	lsls	r7, r3, #25
 8003ac4:	bf48      	it	mi
 8003ac6:	b2ad      	uxthmi	r5, r5
 8003ac8:	6031      	str	r1, [r6, #0]
 8003aca:	07d9      	lsls	r1, r3, #31
 8003acc:	bf44      	itt	mi
 8003ace:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad2:	6023      	strmi	r3, [r4, #0]
 8003ad4:	b11d      	cbz	r5, 8003ade <_printf_i+0x19e>
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	e7ac      	b.n	8003a34 <_printf_i+0xf4>
 8003ada:	4827      	ldr	r0, [pc, #156]	@ (8003b78 <_printf_i+0x238>)
 8003adc:	e7e9      	b.n	8003ab2 <_printf_i+0x172>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f023 0320 	bic.w	r3, r3, #32
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	e7f6      	b.n	8003ad6 <_printf_i+0x196>
 8003ae8:	4616      	mov	r6, r2
 8003aea:	e7bd      	b.n	8003a68 <_printf_i+0x128>
 8003aec:	6833      	ldr	r3, [r6, #0]
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	6961      	ldr	r1, [r4, #20]
 8003af2:	1d18      	adds	r0, r3, #4
 8003af4:	6030      	str	r0, [r6, #0]
 8003af6:	062e      	lsls	r6, r5, #24
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0x1c0>
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0x1c6>
 8003b00:	0668      	lsls	r0, r5, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0x1bc>
 8003b04:	8019      	strh	r1, [r3, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	4616      	mov	r6, r2
 8003b0c:	e7bc      	b.n	8003a88 <_printf_i+0x148>
 8003b0e:	6833      	ldr	r3, [r6, #0]
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	6032      	str	r2, [r6, #0]
 8003b14:	681e      	ldr	r6, [r3, #0]
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f7fc fb78 	bl	8000210 <memchr>
 8003b20:	b108      	cbz	r0, 8003b26 <_printf_i+0x1e6>
 8003b22:	1b80      	subs	r0, r0, r6
 8003b24:	6060      	str	r0, [r4, #4]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	6123      	str	r3, [r4, #16]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b30:	e7aa      	b.n	8003a88 <_printf_i+0x148>
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	4632      	mov	r2, r6
 8003b36:	4649      	mov	r1, r9
 8003b38:	4640      	mov	r0, r8
 8003b3a:	47d0      	blx	sl
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d0ad      	beq.n	8003a9c <_printf_i+0x15c>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	079b      	lsls	r3, r3, #30
 8003b44:	d413      	bmi.n	8003b6e <_printf_i+0x22e>
 8003b46:	68e0      	ldr	r0, [r4, #12]
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	bfb8      	it	lt
 8003b4e:	4618      	movlt	r0, r3
 8003b50:	e7a6      	b.n	8003aa0 <_printf_i+0x160>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4632      	mov	r2, r6
 8003b56:	4649      	mov	r1, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	47d0      	blx	sl
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d09d      	beq.n	8003a9c <_printf_i+0x15c>
 8003b60:	3501      	adds	r5, #1
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	9903      	ldr	r1, [sp, #12]
 8003b66:	1a5b      	subs	r3, r3, r1
 8003b68:	42ab      	cmp	r3, r5
 8003b6a:	dcf2      	bgt.n	8003b52 <_printf_i+0x212>
 8003b6c:	e7eb      	b.n	8003b46 <_printf_i+0x206>
 8003b6e:	2500      	movs	r5, #0
 8003b70:	f104 0619 	add.w	r6, r4, #25
 8003b74:	e7f5      	b.n	8003b62 <_printf_i+0x222>
 8003b76:	bf00      	nop
 8003b78:	08003f3d 	.word	0x08003f3d
 8003b7c:	08003f4e 	.word	0x08003f4e

08003b80 <__sflush_r>:
 8003b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b88:	0716      	lsls	r6, r2, #28
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	d454      	bmi.n	8003c3a <__sflush_r+0xba>
 8003b90:	684b      	ldr	r3, [r1, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dc02      	bgt.n	8003b9c <__sflush_r+0x1c>
 8003b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	dd48      	ble.n	8003c2e <__sflush_r+0xae>
 8003b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b9e:	2e00      	cmp	r6, #0
 8003ba0:	d045      	beq.n	8003c2e <__sflush_r+0xae>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ba8:	682f      	ldr	r7, [r5, #0]
 8003baa:	6a21      	ldr	r1, [r4, #32]
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	d030      	beq.n	8003c12 <__sflush_r+0x92>
 8003bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	0759      	lsls	r1, r3, #29
 8003bb6:	d505      	bpl.n	8003bc4 <__sflush_r+0x44>
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	1ad2      	subs	r2, r2, r3
 8003bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bbe:	b10b      	cbz	r3, 8003bc4 <__sflush_r+0x44>
 8003bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bc8:	6a21      	ldr	r1, [r4, #32]
 8003bca:	4628      	mov	r0, r5
 8003bcc:	47b0      	blx	r6
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	d106      	bne.n	8003be2 <__sflush_r+0x62>
 8003bd4:	6829      	ldr	r1, [r5, #0]
 8003bd6:	291d      	cmp	r1, #29
 8003bd8:	d82b      	bhi.n	8003c32 <__sflush_r+0xb2>
 8003bda:	4a2a      	ldr	r2, [pc, #168]	@ (8003c84 <__sflush_r+0x104>)
 8003bdc:	410a      	asrs	r2, r1
 8003bde:	07d6      	lsls	r6, r2, #31
 8003be0:	d427      	bmi.n	8003c32 <__sflush_r+0xb2>
 8003be2:	2200      	movs	r2, #0
 8003be4:	6062      	str	r2, [r4, #4]
 8003be6:	04d9      	lsls	r1, r3, #19
 8003be8:	6922      	ldr	r2, [r4, #16]
 8003bea:	6022      	str	r2, [r4, #0]
 8003bec:	d504      	bpl.n	8003bf8 <__sflush_r+0x78>
 8003bee:	1c42      	adds	r2, r0, #1
 8003bf0:	d101      	bne.n	8003bf6 <__sflush_r+0x76>
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	b903      	cbnz	r3, 8003bf8 <__sflush_r+0x78>
 8003bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bfa:	602f      	str	r7, [r5, #0]
 8003bfc:	b1b9      	cbz	r1, 8003c2e <__sflush_r+0xae>
 8003bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c02:	4299      	cmp	r1, r3
 8003c04:	d002      	beq.n	8003c0c <__sflush_r+0x8c>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7ff fbf2 	bl	80033f0 <_free_r>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c10:	e00d      	b.n	8003c2e <__sflush_r+0xae>
 8003c12:	2301      	movs	r3, #1
 8003c14:	4628      	mov	r0, r5
 8003c16:	47b0      	blx	r6
 8003c18:	4602      	mov	r2, r0
 8003c1a:	1c50      	adds	r0, r2, #1
 8003c1c:	d1c9      	bne.n	8003bb2 <__sflush_r+0x32>
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0c6      	beq.n	8003bb2 <__sflush_r+0x32>
 8003c24:	2b1d      	cmp	r3, #29
 8003c26:	d001      	beq.n	8003c2c <__sflush_r+0xac>
 8003c28:	2b16      	cmp	r3, #22
 8003c2a:	d11e      	bne.n	8003c6a <__sflush_r+0xea>
 8003c2c:	602f      	str	r7, [r5, #0]
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e022      	b.n	8003c78 <__sflush_r+0xf8>
 8003c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	e01b      	b.n	8003c72 <__sflush_r+0xf2>
 8003c3a:	690f      	ldr	r7, [r1, #16]
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	d0f6      	beq.n	8003c2e <__sflush_r+0xae>
 8003c40:	0793      	lsls	r3, r2, #30
 8003c42:	680e      	ldr	r6, [r1, #0]
 8003c44:	bf08      	it	eq
 8003c46:	694b      	ldreq	r3, [r1, #20]
 8003c48:	600f      	str	r7, [r1, #0]
 8003c4a:	bf18      	it	ne
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	eba6 0807 	sub.w	r8, r6, r7
 8003c52:	608b      	str	r3, [r1, #8]
 8003c54:	f1b8 0f00 	cmp.w	r8, #0
 8003c58:	dde9      	ble.n	8003c2e <__sflush_r+0xae>
 8003c5a:	6a21      	ldr	r1, [r4, #32]
 8003c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c5e:	4643      	mov	r3, r8
 8003c60:	463a      	mov	r2, r7
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b0      	blx	r6
 8003c66:	2800      	cmp	r0, #0
 8003c68:	dc08      	bgt.n	8003c7c <__sflush_r+0xfc>
 8003c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	4407      	add	r7, r0
 8003c7e:	eba8 0800 	sub.w	r8, r8, r0
 8003c82:	e7e7      	b.n	8003c54 <__sflush_r+0xd4>
 8003c84:	dfbffffe 	.word	0xdfbffffe

08003c88 <_fflush_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	690b      	ldr	r3, [r1, #16]
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	b913      	cbnz	r3, 8003c98 <_fflush_r+0x10>
 8003c92:	2500      	movs	r5, #0
 8003c94:	4628      	mov	r0, r5
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	b118      	cbz	r0, 8003ca2 <_fflush_r+0x1a>
 8003c9a:	6a03      	ldr	r3, [r0, #32]
 8003c9c:	b90b      	cbnz	r3, 8003ca2 <_fflush_r+0x1a>
 8003c9e:	f7ff f9ad 	bl	8002ffc <__sinit>
 8003ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f3      	beq.n	8003c92 <_fflush_r+0xa>
 8003caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cac:	07d0      	lsls	r0, r2, #31
 8003cae:	d404      	bmi.n	8003cba <_fflush_r+0x32>
 8003cb0:	0599      	lsls	r1, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_fflush_r+0x32>
 8003cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cb6:	f7ff fb98 	bl	80033ea <__retarget_lock_acquire_recursive>
 8003cba:	4628      	mov	r0, r5
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f7ff ff5f 	bl	8003b80 <__sflush_r>
 8003cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cc4:	07da      	lsls	r2, r3, #31
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	d4e4      	bmi.n	8003c94 <_fflush_r+0xc>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	059b      	lsls	r3, r3, #22
 8003cce:	d4e1      	bmi.n	8003c94 <_fflush_r+0xc>
 8003cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cd2:	f7ff fb8b 	bl	80033ec <__retarget_lock_release_recursive>
 8003cd6:	e7dd      	b.n	8003c94 <_fflush_r+0xc>

08003cd8 <__swhatbuf_r>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	460c      	mov	r4, r1
 8003cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	b096      	sub	sp, #88	@ 0x58
 8003ce4:	4615      	mov	r5, r2
 8003ce6:	461e      	mov	r6, r3
 8003ce8:	da0d      	bge.n	8003d06 <__swhatbuf_r+0x2e>
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2340      	movne	r3, #64	@ 0x40
 8003cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	6031      	str	r1, [r6, #0]
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	b016      	add	sp, #88	@ 0x58
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	466a      	mov	r2, sp
 8003d08:	f000 f848 	bl	8003d9c <_fstat_r>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	dbec      	blt.n	8003cea <__swhatbuf_r+0x12>
 8003d10:	9901      	ldr	r1, [sp, #4]
 8003d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d1a:	4259      	negs	r1, r3
 8003d1c:	4159      	adcs	r1, r3
 8003d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d22:	e7eb      	b.n	8003cfc <__swhatbuf_r+0x24>

08003d24 <__smakebuf_r>:
 8003d24:	898b      	ldrh	r3, [r1, #12]
 8003d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d28:	079d      	lsls	r5, r3, #30
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	d507      	bpl.n	8003d40 <__smakebuf_r+0x1c>
 8003d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	6123      	str	r3, [r4, #16]
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6163      	str	r3, [r4, #20]
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d40:	ab01      	add	r3, sp, #4
 8003d42:	466a      	mov	r2, sp
 8003d44:	f7ff ffc8 	bl	8003cd8 <__swhatbuf_r>
 8003d48:	9f00      	ldr	r7, [sp, #0]
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f7ff fbba 	bl	80034c8 <_malloc_r>
 8003d54:	b948      	cbnz	r0, 8003d6a <__smakebuf_r+0x46>
 8003d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5a:	059a      	lsls	r2, r3, #22
 8003d5c:	d4ee      	bmi.n	8003d3c <__smakebuf_r+0x18>
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	e7e2      	b.n	8003d30 <__smakebuf_r+0xc>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	6020      	str	r0, [r4, #0]
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	9b01      	ldr	r3, [sp, #4]
 8003d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d7a:	b15b      	cbz	r3, 8003d94 <__smakebuf_r+0x70>
 8003d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f81d 	bl	8003dc0 <_isatty_r>
 8003d86:	b128      	cbz	r0, 8003d94 <__smakebuf_r+0x70>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	431d      	orrs	r5, r3
 8003d98:	81a5      	strh	r5, [r4, #12]
 8003d9a:	e7cf      	b.n	8003d3c <__smakebuf_r+0x18>

08003d9c <_fstat_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d07      	ldr	r5, [pc, #28]	@ (8003dbc <_fstat_r+0x20>)
 8003da0:	2300      	movs	r3, #0
 8003da2:	4604      	mov	r4, r0
 8003da4:	4608      	mov	r0, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	f7fd fb94 	bl	80014d6 <_fstat>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	d102      	bne.n	8003db8 <_fstat_r+0x1c>
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	b103      	cbz	r3, 8003db8 <_fstat_r+0x1c>
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	bd38      	pop	{r3, r4, r5, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000b74 	.word	0x20000b74

08003dc0 <_isatty_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d06      	ldr	r5, [pc, #24]	@ (8003ddc <_isatty_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	f7fd fb93 	bl	80014f6 <_isatty>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_isatty_r+0x1a>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_isatty_r+0x1a>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000b74 	.word	0x20000b74

08003de0 <_sbrk_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d06      	ldr	r5, [pc, #24]	@ (8003dfc <_sbrk_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	f7fd fb9c 	bl	8001528 <_sbrk>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_sbrk_r+0x1a>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_sbrk_r+0x1a>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000b74 	.word	0x20000b74

08003e00 <_init>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr

08003e0c <_fini>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr
